import gspread
import logging
from google.oauth2.service_account import Credentials
from datetime import datetime
from pathlib import Path

logger = logging.getLogger(__name__)

class GoogleSheetsSync:
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets"""
    
    def __init__(self, credentials_file: str = 'credentials.json', spreadsheet_name: str = 'Places Bot Data'):
        self.credentials_file = Path(credentials_file)
        self.spreadsheet_name = spreadsheet_name
        self.client = None
        self.spreadsheet = None
        self.enabled = False
        
    def connect(self):
        """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏—Å—Ç–æ–≤)"""
        try:
            if not self.credentials_file.exists():
                logger.warning("‚ö†Ô∏è –§–∞–π–ª credentials.json –Ω–µ –Ω–∞–π–¥–µ–Ω. Google Sheets —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
                return False
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            scope = [
                'https://spreadsheets.google.com/feeds',
                'https://www.googleapis.com/auth/drive'
            ]
            
            creds = Credentials.from_service_account_file(
                str(self.credentials_file),
                scopes=scope
            )
            
            self.client = gspread.authorize(creds)
            
            # –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ - —Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            try:
                self.spreadsheet = self.client.open(self.spreadsheet_name)
                logger.info(f"‚ö° –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ: {self.spreadsheet_name}")
            except gspread.SpreadsheetNotFound:
                self.spreadsheet = self.client.create(self.spreadsheet_name)
                logger.info(f"üìä –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞: {self.spreadsheet_name}")
            
            self.enabled = True
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
            self.enabled = False
            return False
    
    def lazy_init_sheets(self):
        """–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–∏—Å—Ç–æ–≤ –≤ —Ñ–æ–Ω–µ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ)"""
        if not self.enabled:
            return
        
        try:
            sheets_to_check = {
                "–ú–µ—Å—Ç–∞": self._init_places_sheet,
                "–ß–∞–µ–≤—ã–µ": self._init_tips_sheet,
                "–ê–≤–∏—Ç–æ": self._init_avito_sheet,
                "–¢—Ä–∞—Ç—ã": self._init_expenses_sheet,
                "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã": self._init_recurring_expenses_sheet,
                "–ú–µ–¥–∏–∞": self._init_media_sheet,
                "–ó–∞–º–µ—Ç–∫–∏": self._init_notes_sheet
            }
            
            for sheet_name, init_func in sheets_to_check.items():
                try:
                    self.spreadsheet.worksheet(sheet_name)
                    logger.info(f"‚úÖ –õ–∏—Å—Ç '{sheet_name}' –Ω–∞–π–¥–µ–Ω")
                except gspread.WorksheetNotFound:
                    logger.info(f"üìù –õ–∏—Å—Ç '{sheet_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º...")
                    init_func()
            
            logger.info("üéâ –í—Å–µ –ª–∏—Å—Ç—ã Google Sheets –≥–æ—Ç–æ–≤—ã!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–∏—Å—Ç–æ–≤: {e}")
    
    def _init_sheets(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤ —Ç–∞–±–ª–∏—Ü—ã"""
        self._init_places_sheet()
        self._init_tips_sheet()
        self._init_avito_sheet()
        self._init_expenses_sheet()
        self._init_recurring_expenses_sheet()
        self._init_media_sheet()
    
    def _init_places_sheet(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–∏—Å—Ç–∞ '–ú–µ—Å—Ç–∞'"""
        try:
            # –õ–∏—Å—Ç –¥–ª—è –º–µ—Å—Ç
            places_sheet = self.spreadsheet.add_worksheet(title="–ú–µ—Å—Ç–∞", rows=1000, cols=10)
            places_sheet.append_row([
                'ID', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–¢–∏–ø', '–¶–µ–Ω–∞', '–°—Ç–∞—Ç—É—Å', '–†–µ—Ü–µ–Ω–∑–∏—è',
                '–ê–¥—Ä–µ—Å', '–û–ø–∏—Å–∞–Ω–∏–µ', '–°–æ—Ü.—Å–µ—Ç—å', '–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è'
            ])
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            places_sheet.format('A1:J1', {
                'textFormat': {'bold': True},
                'backgroundColor': {'red': 0.8, 'green': 0.8, 'blue': 0.8}
            })
            
            # –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç–æ–ª–±–µ—Ü ID (—Å—Ç–æ–ª–±–µ—Ü A)
            try:
                self.spreadsheet.batch_update({
                    'requests': [{
                        'updateDimensionProperties': {
                            'range': {
                                'sheetId': places_sheet.id,
                                'dimension': 'COLUMNS',
                                'startIndex': 0,  # –°—Ç–æ–ª–±–µ—Ü A (ID)
                                'endIndex': 1
                            },
                            'properties': {
                                'hiddenByUser': True
                            },
                            'fields': 'hiddenByUser'
                        }
                    }]
                })
                logger.info("üîí –°—Ç–æ–ª–±–µ—Ü ID (–ú–µ—Å—Ç–∞) —Å–∫—Ä—ã—Ç")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫—Ä—ã—Ç—å —Å—Ç–æ–ª–±–µ—Ü ID: {e}")
            
            logger.info("‚úÖ –õ–∏—Å—Ç '–ú–µ—Å—Ç–∞' –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–∏—Å—Ç–∞ '–ú–µ—Å—Ç–∞': {e}")
    
    def _init_tips_sheet(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–∏—Å—Ç–∞ '–ß–∞–µ–≤—ã–µ'"""
        try:
            # –õ–∏—Å—Ç –¥–ª—è —á–∞–µ–≤—ã—Ö
            tips_sheet = self.spreadsheet.add_worksheet(title="–ß–∞–µ–≤—ã–µ", rows=1000, cols=7)
            tips_sheet.append_row([
                'ID', '–î–∞—Ç–∞', '–ö–∞—Ä—Ç—ã', '–ù–µ—Ç.–ú–æ–Ω–µ—Ç', '–ù–∞–ª–∏—á–Ω—ã–µ', '–ò—Ç–æ–≥–æ', '–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è'
            ])
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            tips_sheet.format('A1:G1', {
                'textFormat': {'bold': True},
                'backgroundColor': {'red': 0.8, 'green': 0.8, 'blue': 0.8}
            })
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏ –≤–Ω–∏–∑—É (—Å—Ç—Ä–æ–∫–∞ 1000)
            # –§–æ—Ä–º—É–ª—ã –±—É–¥—É—Ç —Å—á–∏—Ç–∞—Ç—å —Å—É–º–º—ã –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º C, D, E, F (–ö–∞—Ä—Ç—ã, –ù–µ—Ç.–ú–æ–Ω–µ—Ç, –ù–∞–ª–∏—á–Ω—ã–µ, –ò—Ç–æ–≥–æ)
            # –ò –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–º–µ–Ω (COUNT) –≤ —Å—Ç–æ–ª–±—Ü–µ B
            tips_sheet.update('A1000', [['–ò–¢–û–ì–û:']])
            tips_sheet.update('B1000', [['=COUNTA(B2:B999)']])  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–º–µ–Ω
            tips_sheet.update('C1000', [['=SUM(C2:C999)']])  # –°—É–º–º–∞ –∫–∞—Ä—Ç
            tips_sheet.update('D1000', [['=SUM(D2:D999)']])  # –°—É–º–º–∞ –ù–µ—Ç.–ú–æ–Ω–µ—Ç
            tips_sheet.update('E1000', [['=SUM(E2:E999)']])  # –°—É–º–º–∞ –Ω–∞–ª–∏—á–Ω—ã—Ö
            tips_sheet.update('F1000', [['=SUM(F2:F999)']])  # –ò—Ç–æ–≥–æ
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏ (–∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç, –∂–µ–ª—Ç—ã–π —Ñ–æ–Ω)
            tips_sheet.format('A1000:G1000', {
                'textFormat': {'bold': True},
                'backgroundColor': {'red': 1.0, 'green': 0.95, 'blue': 0.8}
            })
            
            # –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç–æ–ª–±–µ—Ü ID (—Å—Ç–æ–ª–±–µ—Ü A)
            try:
                self.spreadsheet.batch_update({
                    'requests': [{
                        'updateDimensionProperties': {
                            'range': {
                                'sheetId': tips_sheet.id,
                                'dimension': 'COLUMNS',
                                'startIndex': 0,  # –°—Ç–æ–ª–±–µ—Ü A (ID)
                                'endIndex': 1
                            },
                            'properties': {
                                'hiddenByUser': True
                            },
                            'fields': 'hiddenByUser'
                        }
                    }]
                })
                logger.info("üîí –°—Ç–æ–ª–±–µ—Ü ID (–ß–∞–µ–≤—ã–µ) —Å–∫—Ä—ã—Ç")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫—Ä—ã—Ç—å —Å—Ç–æ–ª–±–µ—Ü ID: {e}")
            
            logger.info("‚úÖ –õ–∏—Å—Ç '–ß–∞–µ–≤—ã–µ' –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–∏—Å—Ç–∞ '–ß–∞–µ–≤—ã–µ': {e}")
    
    def _init_avito_sheet(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–∏—Å—Ç–∞ '–ê–≤–∏—Ç–æ'"""
        try:
            # –õ–∏—Å—Ç –¥–ª—è –ê–≤–∏—Ç–æ
            avito_sheet = self.spreadsheet.add_worksheet(title="–ê–≤–∏—Ç–æ", rows=1000, cols=5)
            avito_sheet.append_row([
                'ID', '–ù–∞–∑–≤–∞–Ω–∏–µ –≤–µ—â–∏', '–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂–∏', '–î–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏', '–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è'
            ])
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            avito_sheet.format('A1:E1', {
                'textFormat': {'bold': True},
                'backgroundColor': {'red': 0.8, 'green': 0.8, 'blue': 0.8}
            })
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏ –≤–Ω–∏–∑—É (—Å—Ç—Ä–æ–∫–∞ 1000)
            avito_sheet.update('A1000', [['–ò–¢–û–ì–û:']])
            avito_sheet.update('B1000', [['=COUNTA(B2:B999)']])  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—â–µ–π
            avito_sheet.update('C1000', [['=SUM(C2:C999)']])  # –û–±—â–∞—è —Å—É–º–º–∞
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏
            avito_sheet.format('A1000:E1000', {
                'textFormat': {'bold': True},
                'backgroundColor': {'red': 1.0, 'green': 0.95, 'blue': 0.8}
            })
            
            # –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç–æ–ª–±–µ—Ü ID (—Å—Ç–æ–ª–±–µ—Ü A)
            try:
                self.spreadsheet.batch_update({
                    'requests': [{
                        'updateDimensionProperties': {
                            'range': {
                                'sheetId': avito_sheet.id,
                                'dimension': 'COLUMNS',
                                'startIndex': 0,  # –°—Ç–æ–ª–±–µ—Ü A (ID)
                                'endIndex': 1
                            },
                            'properties': {
                                'hiddenByUser': True
                            },
                            'fields': 'hiddenByUser'
                        }
                    }]
                })
                logger.info("üîí –°—Ç–æ–ª–±–µ—Ü ID (–ê–≤–∏—Ç–æ) —Å–∫—Ä—ã—Ç")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫—Ä—ã—Ç—å —Å—Ç–æ–ª–±–µ—Ü ID: {e}")
            
            logger.info("‚úÖ –õ–∏—Å—Ç '–ê–≤–∏—Ç–æ' –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–∏—Å—Ç–∞ '–ê–≤–∏—Ç–æ': {e}")
    
    def add_place(self, user_id: int, user_name: str, place_data: dict):
        """–î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ –≤ —Ç–∞–±–ª–∏—Ü—É"""
        if not self.enabled:
            return False
        
        try:
            sheet = self.spreadsheet.worksheet("–ú–µ—Å—Ç–∞")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞—Ç—É—Å –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
            status = place_data.get('status', 'visited')
            status_text = '‚úÖ –ü–æ—Å–µ—â–µ–Ω–æ' if status == 'visited' else 'üìÖ –ü–ª–∞–Ω–∏—Ä—É—é'
            
            row = [
                place_data.get('id', ''),
                place_data.get('name', ''),
                place_data.get('place_type', ''),
                place_data.get('price_category', ''),
                status_text,
                place_data.get('review', ''),
                place_data.get('address', ''),
                place_data.get('description', ''),
                place_data.get('social_link', ''),
                datetime.now().strftime('%d.%m.%Y %H:%M')
            ]
            
            sheet.append_row(row)
            logger.info(f"üìä –ú–µ—Å—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ Google Sheets: {place_data.get('name')}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ Google Sheets: {e}")
            return False
    
    def delete_place(self, place_id: int):
        """–£–¥–∞–ª–∏—Ç—å –º–µ—Å—Ç–æ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"""
        if not self.enabled:
            return False
        
        try:
            sheet = self.spreadsheet.worksheet("–ú–µ—Å—Ç–∞")
            
            # –ù–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫—É —Å –Ω—É–∂–Ω—ã–º ID
            cell = sheet.find(str(place_id), in_column=1)
            if cell:
                sheet.delete_rows(cell.row)
                logger.info(f"üìä –ú–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ Google Sheets: ID {place_id}")
                return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ Google Sheets: {e}")
            return False
    
    def add_tips(self, user_id: int, user_name: str, tips_data: dict):
        """–î–æ–±–∞–≤–∏—Ç—å —á–∞–µ–≤—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É"""
        if not self.enabled:
            return False
        
        try:
            sheet = self.spreadsheet.worksheet("–ß–∞–µ–≤—ã–µ")
            
            row = [
                tips_data.get('id', ''),
                tips_data.get('date', ''),
                tips_data.get('card', 0),
                tips_data.get('netmonet', 0),
                tips_data.get('cash', 0),
                tips_data.get('total', 0),
                datetime.now().strftime('%d.%m.%Y %H:%M')
            ]
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –≤ —Å—Ç—Ä–æ–∫—É 2 (–ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤), —á—Ç–æ–±—ã –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –±—ã–ª–∏ —Å–≤–µ—Ä—Ö—É
            sheet.insert_row(row, 2)
            logger.info(f"üìä –ß–∞–µ–≤—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ Google Sheets: {tips_data.get('date')}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —á–∞–µ–≤—ã—Ö –≤ Google Sheets: {e}")
            return False
    
    def delete_tips(self, tips_id: int):
        """–£–¥–∞–ª–∏—Ç—å —á–∞–µ–≤—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"""
        if not self.enabled:
            return False
        
        try:
            sheet = self.spreadsheet.worksheet("–ß–∞–µ–≤—ã–µ")
            
            # –ù–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫—É —Å –Ω—É–∂–Ω—ã–º ID
            cell = sheet.find(str(tips_id), in_column=1)
            if cell:
                sheet.delete_rows(cell.row)
                logger.info(f"üìä –ß–∞–µ–≤—ã–µ —É–¥–∞–ª–µ–Ω—ã –∏–∑ Google Sheets: ID {tips_id}")
                return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–∞–µ–≤—ã—Ö –∏–∑ Google Sheets: {e}")
            return False
    
    def add_avito_sale(self, user_id: int, user_name: str, sale_data: dict):
        """–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É –ê–≤–∏—Ç–æ –≤ —Ç–∞–±–ª–∏—Ü—É"""
        if not self.enabled:
            return False
        
        try:
            sheet = self.spreadsheet.worksheet("–ê–≤–∏—Ç–æ")
            
            row = [
                sale_data.get('id', ''),
                sale_data.get('item_name', ''),
                sale_data.get('amount', 0),
                sale_data.get('sale_date', ''),
                datetime.now().strftime('%d.%m.%Y %H:%M')
            ]
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –≤ —Å—Ç—Ä–æ–∫—É 2 (–ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
            sheet.insert_row(row, 2)
            logger.info(f"üìä –ü—Ä–æ–¥–∞–∂–∞ –ê–≤–∏—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Google Sheets: {sale_data.get('item_name')}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥–∞–∂–∏ –ê–≤–∏—Ç–æ –≤ Google Sheets: {e}")
            return False
    
    def delete_avito_sale(self, sale_id: int):
        """–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É –ê–≤–∏—Ç–æ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"""
        if not self.enabled:
            return False
        
        try:
            sheet = self.spreadsheet.worksheet("–ê–≤–∏—Ç–æ")
            
            # –ù–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫—É —Å –Ω—É–∂–Ω—ã–º ID
            cell = sheet.find(str(sale_id), in_column=1)
            if cell:
                sheet.delete_rows(cell.row)
                logger.info(f"üìä –ü—Ä–æ–¥–∞–∂–∞ –ê–≤–∏—Ç–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ Google Sheets: ID {sale_id}")
                return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥–∞–∂–∏ –ê–≤–∏—Ç–æ –∏–∑ Google Sheets: {e}")
            return False
    
    def _init_expenses_sheet(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–∏—Å—Ç–∞ '–¢—Ä–∞—Ç—ã'"""
        try:
            # –õ–∏—Å—Ç –¥–ª—è —Ç—Ä–∞—Ç
            expenses_sheet = self.spreadsheet.add_worksheet(title="–¢—Ä–∞—Ç—ã", rows=1000, cols=7)
            expenses_sheet.append_row([
                'ID', '–î–∞—Ç–∞', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–°—É–º–º–∞', '–ó–∞–º–µ—Ç–∫–∞', '–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è'
            ])
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            expenses_sheet.format('A1:G1', {
                'textFormat': {'bold': True},
                'backgroundColor': {'red': 0.8, 'green': 0.8, 'blue': 0.8}
            })
            
            # –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç–æ–ª–±–µ—Ü ID
            try:
                self.spreadsheet.batch_update({
                    'requests': [{
                        'updateDimensionProperties': {
                            'range': {
                                'sheetId': expenses_sheet.id,
                                'dimension': 'COLUMNS',
                                'startIndex': 0,
                                'endIndex': 1
                            },
                            'properties': {
                                'hiddenByUser': True
                            },
                            'fields': 'hiddenByUser'
                        }
                    }]
                })
                logger.info("üîí –°—Ç–æ–ª–±–µ—Ü ID (–¢—Ä–∞—Ç—ã) —Å–∫—Ä—ã—Ç")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫—Ä—ã—Ç—å —Å—Ç–æ–ª–±–µ—Ü ID: {e}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É–ª—ã –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ (—Å—Ç—Ä–æ–∫–∞ 1000)
            expenses_sheet.update('B1000', [['–ò—Ç–æ–≥–æ:']])
            expenses_sheet.update('E1000', [['=SUM(E2:E999)']])  # –°—É–º–º–∞ —Ç—Ä–∞—Ç
            expenses_sheet.update('A999', [['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞—Ç:']])
            expenses_sheet.update('B999', [['=COUNTA(B2:B998)']])  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞—Ç
            
            logger.info("‚úÖ –õ–∏—Å—Ç '–¢—Ä–∞—Ç—ã' –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–∏—Å—Ç–∞ '–¢—Ä–∞—Ç—ã': {e}")
    
    def _init_recurring_expenses_sheet(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–∏—Å—Ç–∞ '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã'"""
        try:
            # –õ–∏—Å—Ç –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
            recurring_sheet = self.spreadsheet.add_worksheet(title="–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã", rows=1000, cols=5)
            recurring_sheet.append_row([
                'ID', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–°—É–º–º–∞', '–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã', '–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è'
            ])
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            recurring_sheet.format('A1:E1', {
                'textFormat': {'bold': True},
                'backgroundColor': {'red': 0.8, 'green': 0.8, 'blue': 0.8}
            })
            
            # –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç–æ–ª–±–µ—Ü ID
            try:
                self.spreadsheet.batch_update({
                    'requests': [{
                        'updateDimensionProperties': {
                            'range': {
                                'sheetId': recurring_sheet.id,
                                'dimension': 'COLUMNS',
                                'startIndex': 0,
                                'endIndex': 1
                            },
                            'properties': {
                                'hiddenByUser': True
                            },
                            'fields': 'hiddenByUser'
                        }
                    }]
                })
                logger.info("üîí –°—Ç–æ–ª–±–µ—Ü ID (–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã) —Å–∫—Ä—ã—Ç")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫—Ä—ã—Ç—å —Å—Ç–æ–ª–±–µ—Ü ID: {e}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É–ª—ã –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ (—Å—Ç—Ä–æ–∫–∞ 1000)
            recurring_sheet.update('B1000', [['–ò—Ç–æ–≥–æ:']])
            recurring_sheet.update('C1000', [['=SUM(C2:C999)']])  # –°—É–º–º–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
            recurring_sheet.update('A999', [['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—Ç–µ–∂–µ–π:']])
            recurring_sheet.update('B999', [['=COUNTA(B2:B998)']])  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—Ç–µ–∂–µ–π
            
            logger.info("‚úÖ –õ–∏—Å—Ç '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã' –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–∏—Å—Ç–∞ '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã': {e}")
    
    def _init_media_sheet(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –µ–¥–∏–Ω–æ–≥–æ –ª–∏—Å—Ç–∞ '–ú–µ–¥–∏–∞' –¥–ª—è —Ñ–∏–ª—å–º–æ–≤, —Å–µ—Ä–∏–∞–ª–æ–≤ –∏ –ø–æ–¥–∫–∞—Å—Ç–æ–≤"""
        try:
            # –ï–¥–∏–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞
            media_sheet = self.spreadsheet.add_worksheet(title="–ú–µ–¥–∏–∞", rows=1000, cols=12)
            media_sheet.append_row([
                'ID', '–¢–∏–ø', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–ñ–∞–Ω—Ä', '–ì–æ–¥', '–°—é–∂–µ—Ç', 
                '–°–µ–∑–æ–Ω—ã', '–°–µ—Ä–∏–∏', '–°—Ç–∞—Ç—É—Å', '–†–µ–π—Ç–∏–Ω–≥', '–ó–∞–º–µ—Ç–∫–∏', '–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è'
            ])
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            media_sheet.format('A1:L1', {
                'textFormat': {'bold': True},
                'backgroundColor': {'red': 0.8, 'green': 0.8, 'blue': 0.8}
            })
            
            # –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç–æ–ª–±–µ—Ü ID
            try:
                self.spreadsheet.batch_update({
                    'requests': [{
                        'updateDimensionProperties': {
                            'range': {
                                'sheetId': media_sheet.id,
                                'dimension': 'COLUMNS',
                                'startIndex': 0,
                                'endIndex': 1
                            },
                            'properties': {
                                'hiddenByUser': True
                            },
                            'fields': 'hiddenByUser'
                        }
                    }]
                })
                logger.info("üîí –°—Ç–æ–ª–±–µ—Ü ID (–ú–µ–¥–∏–∞) —Å–∫—Ä—ã—Ç")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫—Ä—ã—Ç—å —Å—Ç–æ–ª–±–µ—Ü ID: {e}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É–ª—ã –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ (—Å—Ç—Ä–æ–∫–∞ 1000)
            media_sheet.update('B1000', [['–í—Å–µ–≥–æ:']])
            media_sheet.update('C1000', [['=COUNTA(B2:B999)']])  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            media_sheet.update('A999', [['–§–∏–ª—å–º–æ–≤:']])
            media_sheet.update('B999', [['=COUNTIF(B2:B998,"–§–∏–ª—å–º")']])  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å–º–æ–≤
            media_sheet.update('A998', [['–°–µ—Ä–∏–∞–ª–æ–≤:']])
            media_sheet.update('B998', [['=COUNTIF(B2:B998,"–°–µ—Ä–∏–∞–ª")']])  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–∏–∞–ª–æ–≤
            media_sheet.update('A997', [['–ü–æ–¥–∫–∞—Å—Ç–æ–≤:']])
            media_sheet.update('B997', [['=COUNTIF(B2:B998,"–ü–æ–¥–∫–∞—Å—Ç")']])  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–∞—Å—Ç–æ–≤
            
            logger.info("‚úÖ –õ–∏—Å—Ç '–ú–µ–¥–∏–∞' –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–∏—Å—Ç–∞ '–ú–µ–¥–∏–∞': {e}")
    
    def add_media(self, user_id: int, user_name: str, media_data: dict):
        """–î–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞ (—Ñ–∏–ª—å–º/—Å–µ—Ä–∏–∞–ª/–ø–æ–¥–∫–∞—Å—Ç) –≤ —Ç–∞–±–ª–∏—Ü—É"""
        if not self.enabled:
            return False
        
        try:
            sheet = self.spreadsheet.worksheet("–ú–µ–¥–∏–∞")
            
            row = [
                media_data.get('id', ''),
                media_data.get('type', ''),  # –§–∏–ª—å–º/–°–µ—Ä–∏–∞–ª/–ü–æ–¥–∫–∞—Å—Ç
                media_data.get('title', ''),
                media_data.get('genre', ''),
                media_data.get('year', ''),
                media_data.get('overview', ''),
                media_data.get('seasons', '') if media_data.get('seasons') else '',
                media_data.get('episodes', '') if media_data.get('episodes') else '',
                media_data.get('status', ''),
                '‚≠ê' * media_data.get('rating', 0) if media_data.get('rating') else '',
                media_data.get('notes', ''),
                datetime.now().strftime('%d.%m.%Y %H:%M')
            ]
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –≤ —Å—Ç—Ä–æ–∫—É 2 (–ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
            sheet.insert_row(row, 2)
            logger.info(f"üìä –ú–µ–¥–∏–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ Google Sheets: {media_data.get('title')}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ–¥–∏–∞ –≤ Google Sheets: {e}")
            return False
    
    def add_expense(self, user_id: int, user_name: str, expense_data: dict):
        """–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É –≤ —Ç–∞–±–ª–∏—Ü—É"""
        if not self.enabled:
            return False
        
        try:
            sheet = self.spreadsheet.worksheet("–¢—Ä–∞—Ç—ã")
            
            row = [
                expense_data.get('id', ''),
                expense_data.get('expense_date', ''),
                expense_data.get('category', ''),
                expense_data.get('name', ''),
                expense_data.get('amount', 0),
                expense_data.get('note', ''),
                datetime.now().strftime('%d.%m.%Y %H:%M')
            ]
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –≤ —Å—Ç—Ä–æ–∫—É 2 (–ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
            sheet.insert_row(row, 2)
            logger.info(f"üìä –¢—Ä–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Google Sheets: {expense_data.get('name')}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞—Ç—ã –≤ Google Sheets: {e}")
            return False
    
    def add_recurring_expense(self, user_id: int, user_name: str, expense_data: dict):
        """–î–æ–±–∞–≤–∏—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—Ö–æ–¥ –≤ —Ç–∞–±–ª–∏—Ü—É"""
        if not self.enabled:
            return False
        
        try:
            sheet = self.spreadsheet.worksheet("–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã")
            
            row = [
                expense_data.get('id', ''),
                expense_data.get('name', ''),
                expense_data.get('amount', 0),
                expense_data.get('payment_date', ''),
                datetime.now().strftime('%d.%m.%Y %H:%M')
            ]
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –≤ —Å—Ç—Ä–æ–∫—É 2 (–ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
            sheet.insert_row(row, 2)
            logger.info(f"üìä –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω –≤ Google Sheets: {expense_data.get('name')}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞ –≤ Google Sheets: {e}")
            return False
    
    def _init_notes_sheet(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–∏—Å—Ç–∞ '–ó–∞–º–µ—Ç–∫–∏'"""
        try:
            notes_sheet = self.spreadsheet.add_worksheet(title="–ó–∞–º–µ—Ç–∫–∏", rows=1000, cols=4)
            notes_sheet.append_row(['ID', '–î–∞—Ç–∞', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–¢–µ–∫—Å—Ç'])
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            notes_sheet.format('A1:D1', {
                'textFormat': {'bold': True},
                'backgroundColor': {'red': 0.8, 'green': 0.8, 'blue': 0.8}
            })
            
            # –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç–æ–ª–±–µ—Ü ID
            try:
                self.spreadsheet.batch_update({
                    'requests': [{
                        'updateDimensionProperties': {
                            'range': {
                                'sheetId': notes_sheet.id,
                                'dimension': 'COLUMNS',
                                'startIndex': 0,
                                'endIndex': 1
                            },
                            'properties': {
                                'hiddenByUser': True
                            },
                            'fields': 'hiddenByUser'
                        }
                    }]
                })
                logger.info("üîí –°—Ç–æ–ª–±–µ—Ü ID (–ó–∞–º–µ—Ç–∫–∏) —Å–∫—Ä—ã—Ç")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫—Ä—ã—Ç—å —Å—Ç–æ–ª–±–µ—Ü ID: {e}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É–ª—ã –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ (—Å—Ç—Ä–æ–∫–∞ 1000)
            notes_sheet.update('C1000', [['–í—Å–µ–≥–æ –∑–∞–º–µ—Ç–æ–∫:']])
            notes_sheet.update('D1000', [['=COUNTA(C2:C999)']])  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            
            logger.info("‚úÖ –õ–∏—Å—Ç '–ó–∞–º–µ—Ç–∫–∏' –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–∏—Å—Ç–∞ '–ó–∞–º–µ—Ç–∫–∏': {e}")
    
    def add_note(self, user_id: int, user_name: str, note_data: dict):
        """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É"""
        if not self.enabled:
            return False
        
        try:
            sheet = self.spreadsheet.worksheet("–ó–∞–º–µ—Ç–∫–∏")
            
            row = [
                note_data.get('id', ''),
                datetime.now().strftime('%d.%m.%Y %H:%M'),
                note_data.get('category', ''),
                note_data.get('text', '')
            ]
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –≤ —Å—Ç—Ä–æ–∫—É 2 (–ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
            sheet.insert_row(row, 2)
            logger.info(f"üìä –ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Google Sheets")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ –≤ Google Sheets: {e}")
            return False
    
    def delete_note(self, note_id: int):
        """–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"""
        if not self.enabled:
            return False
        
        try:
            sheet = self.spreadsheet.worksheet("–ó–∞–º–µ—Ç–∫–∏")
            cell = sheet.find(str(note_id))
            if cell:
                sheet.delete_rows(cell.row)
                logger.info(f"üóë –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ Google Sheets")
                return True
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ Google Sheets: {e}")
            return False
    
    def get_spreadsheet_url(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∞–±–ª–∏—Ü—É"""
        if self.spreadsheet:
            return self.spreadsheet.url
        return None

