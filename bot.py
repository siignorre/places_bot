import asyncio
import logging
import sys
import os
import signal
import atexit
import warnings
import urllib.parse
from os import getenv
from dotenv import load_dotenv
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, Any

# –ü–æ–¥–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ urllib3 –ø—Ä–æ OpenSSL
warnings.filterwarnings('ignore', message='urllib3 v2 only supports OpenSSL')

from aiogram import Bot, Dispatcher, Router, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.types import (
    Message, 
    CallbackQuery, 
    InlineKeyboardMarkup, 
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database import Database
from google_sheets import GoogleSheetsSync
from constants import (
    GENRE_MAP, GENRE_REVERSE_MAP, GENRE_BUTTONS,
    PLACE_TYPES, PRICE_CATEGORIES, EXPENSE_CATEGORIES,
    CUISINE_TYPES, CUISINE_BUTTONS,
    MOVIE_STATUS_WATCHED, MOVIE_STATUS_UNWATCHED,
    SERIES_STATUS_UNWATCHED, SERIES_STATUS_WATCHING, SERIES_STATUS_WATCHED,
    PLACES_PER_PAGE, TIPS_PER_PAGE, NOTE_CATEGORIES, NOTE_CATEGORY_BUTTONS, NOTES_PER_PAGE,
    EMOJI_CANCEL, EMOJI_SKIP, EMOJI_BACK, EMOJI_DELETE,
    WISHLIST_SIZE_CATEGORIES, WISHLIST_TYPE_CATEGORIES, WISHLIST_PRIORITIES
)
from utils import (
    SimpleCache, format_date, format_movie_text, format_series_text, capitalize_first,
    calculate_tips_distribution, calculate_avito_distribution, 
    get_motivation_message, format_distribution,
    calculate_wage_distribution, format_wage_distribution,
    search_place_yandex, get_place_details_yandex
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = getenv("BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# –£–º–µ–Ω—å—à–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ aiogram –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
logging.getLogger('aiogram.event').setLevel(logging.WARNING)  # –ú–µ–Ω—å—à–µ INFO —Å–æ–æ–±—â–µ–Ω–∏–π

# –§–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
LOCKFILE = Path('.bot.lock')

# –ö—ç—à –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
dp = Dispatcher()
router = Router()
db = Database()
cache = SimpleCache(ttl_seconds=600)  # –ö—ç—à –Ω–∞ 10 –º–∏–Ω—É—Ç (—É–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–¥–µ–π—Å—Ç–≤–∏—è)
google_sheets = GoogleSheetsSync()  # Google Sheets —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–∞
class AddPlaceStates(StatesGroup):
    waiting_for_name = State()
    choosing_from_search = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
    choosing_fill_method = State()  # –í—ã–±–æ—Ä: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–ª–∏ –≤—Ä—É—á–Ω—É—é
    waiting_for_type = State()
    waiting_for_cuisine = State()
    waiting_for_price = State()
    waiting_for_status = State()
    waiting_for_review = State()
    waiting_for_address = State()
    waiting_for_description = State()
    waiting_for_social = State()
    waiting_for_location = State()

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Å—Ç–∞
class EditPlaceStates(StatesGroup):
    selecting_field = State()
    editing_name = State()
    editing_type = State()
    editing_cuisine = State()
    editing_price = State()
    editing_status = State()
    editing_review = State()
    editing_address = State()
    editing_description = State()
    editing_social = State()
    editing_location = State()
    editing_working_hours = State()

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞–µ–≤—ã—Ö
class AddTipsStates(StatesGroup):
    waiting_for_hours = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —á–∞—Å–æ–≤
    waiting_for_card = State()
    waiting_for_netmonet = State()
    waiting_for_cash = State()
    waiting_for_date = State()

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ –ê–≤–∏—Ç–æ
class AddAvitoStates(StatesGroup):
    waiting_for_item_name = State()
    waiting_for_amount = State()
    waiting_for_date = State()

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞—Ç—ã
class AddExpenseStates(StatesGroup):
    waiting_for_category = State()
    waiting_for_name = State()
    waiting_for_amount = State()
    waiting_for_date_choice = State()
    waiting_for_date = State()
    waiting_for_note_choice = State()
    waiting_for_note = State()

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞
class AddRecurringExpenseStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_amount = State()
    waiting_for_date = State()

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å–º–∞
class AddMovieStates(StatesGroup):
    waiting_for_title = State()
    waiting_for_genre = State()
    waiting_for_year = State()
    waiting_for_status = State()
    waiting_for_rating = State()
    waiting_for_notes = State()

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∏–ª—å–º–æ–≤
class ViewMoviesStates(StatesGroup):
    waiting_for_genre = State()
    waiting_for_random_genre = State()

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–µ—Ä–∏–∞–ª–æ–≤
class ViewSeriesStates(StatesGroup):
    waiting_for_genre = State()

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–∏–∞–ª–∞
class AddSeriesStates(StatesGroup):
    waiting_for_title = State()
    waiting_for_genre = State()
    waiting_for_year = State()
    waiting_for_seasons = State()
    waiting_for_episodes = State()
    waiting_for_status = State()
    waiting_for_rating = State()
    waiting_for_notes = State()

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–∞—Å—Ç–∞
class AddPodcastStates(StatesGroup):
    waiting_for_title = State()
    waiting_for_author = State()
    waiting_for_status = State()
    waiting_for_rating = State()
    waiting_for_notes = State()

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–º–µ—Ç–∫–∏
class QuickNoteStates(StatesGroup):
    waiting_for_category = State()
    waiting_for_text = State()
    waiting_for_edit = State()

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫
class SearchNotesStates(StatesGroup):
    waiting_for_query = State()

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≤–∏—à–ª–∏—Å—Ç
class AddWishlistStates(StatesGroup):
    waiting_for_size_category = State()
    waiting_for_type_category = State()
    waiting_for_name = State()
    waiting_for_price = State()
    waiting_for_priority = State()
    waiting_for_photo = State()
    waiting_for_link = State()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –æ –º–µ—Å—Ç–µ
user_place_data = {}

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –æ —á–∞–µ–≤—ã—Ö
user_tips_data = {}

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –ê–≤–∏—Ç–æ
user_avito_data = {}

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞—Ç–∞—Ö
user_expense_data = {}

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–∞—Ö
user_recurring_expense_data = {}

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –æ –º–µ–¥–∏–∞
user_movie_data = {}
user_series_data = {}
user_podcast_data = {}
user_note_data = {}
user_wishlist_data = {}

# –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë§ –õ–∏—á–Ω–æ–µ")],
            [KeyboardButton(text="üìö –ò–∑—É—á–µ–Ω–∏–µ"), KeyboardButton(text="üí∞ –§–∏–Ω–∞–Ω—Å—ã")],
            [KeyboardButton(text="üìù –ë—ã—Å—Ç—Ä–∞—è –∑–∞–º–µ—Ç–∫–∞"), KeyboardButton(text="üé• –í–∏–¥–µ–æ–≥—Ä–∞—Ñ–∏—è")],
        ],
        resize_keyboard=True
    )
    return keyboard

# –ü–æ–¥–º–µ–Ω—é "–õ–∏—á–Ω–æ–µ"
def get_personal_submenu():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìç –ú–µ—Å—Ç–∞"), KeyboardButton(text="‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ")],
            [KeyboardButton(text="üìî –î–Ω–µ–≤–Ω–∏–∫"), KeyboardButton(text="üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")],
            [KeyboardButton(text="‚≠ê –í–∏—à–ª–∏—Å—Ç")],
            [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True
    )
    return keyboard

# –ü–æ–¥–º–µ–Ω—é "–ú–µ—Å—Ç–∞"
def get_places_submenu():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ"), KeyboardButton(text="üéâ –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")],
            [KeyboardButton(text="üìã –ú–æ–∏ –º–µ—Å—Ç–∞"), KeyboardButton(text="üîç –ü–æ–∏—Å–∫")],
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton(text="‚óÄÔ∏è –ö –ª–∏—á–Ω–æ–º—É")],
        ],
        resize_keyboard=True
    )
    return keyboard

# –ü–æ–¥–º–µ–Ω—é "–ò–∑—É—á–µ–Ω–∏–µ"
def get_learning_submenu():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üé¨ –ú–µ–¥–∏–∞")],
            [KeyboardButton(text="üìñ –ö–Ω–∏–≥–∏")],
            [KeyboardButton(text="üí° –ù–æ–≤—ã–µ —Ç–µ–º—ã")],
            [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True
    )
    return keyboard

# –ü–æ–¥–º–µ–Ω—é "–í–∏–¥–µ–æ–≥—Ä–∞—Ñ–∏—è"
def get_videography_submenu():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üí° –ò–¥–µ–∏")],
            [KeyboardButton(text="‚≠ê –í–∏—à–ª–∏—Å—Ç")],
            [KeyboardButton(text="üì∏ –ö–∞–¥—Ä")],
            [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True
    )
    return keyboard

# –ú–µ–Ω—é –ú–µ–¥–∏–∞
def get_media_submenu():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üé¨ –§–∏–ª—å–º—ã")],
            [KeyboardButton(text="üì∫ –°–µ—Ä–∏–∞–ª—ã")],
            [KeyboardButton(text="üéô –ü–æ–¥–∫–∞—Å—Ç—ã")],
            [KeyboardButton(text="‚óÄÔ∏è –ö –∏–∑—É—á–µ–Ω–∏—é")],
        ],
        resize_keyboard=True
    )
    return keyboard

# –ú–µ–Ω—é –§–∏–ª—å–º–æ–≤
def get_movies_submenu():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º")],
            [KeyboardButton(text="‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ"), KeyboardButton(text="üëÅ –ù–µ —Å–º–æ—Ç—Ä–µ–ª")],
            [KeyboardButton(text="üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º")],
            [KeyboardButton(text="‚óÄÔ∏è –ö –º–µ–¥–∏–∞")],
        ],
        resize_keyboard=True
    )
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–∞
def get_genre_keyboard():
    keyboard_layout = [[KeyboardButton(text=genre) for genre in row] for row in GENRE_BUTTONS]
    keyboard_layout.append([KeyboardButton(text=EMOJI_BACK)])
    keyboard = ReplyKeyboardMarkup(
        keyboard=keyboard_layout,
        resize_keyboard=True
    )
    return keyboard

# –ú–µ–Ω—é –°–µ—Ä–∏–∞–ª–æ–≤
def get_series_submenu():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–∏–∞–ª")],
            [KeyboardButton(text="‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ"), KeyboardButton(text="üëÄ –°–º–æ—Ç—Ä—é")],
            [KeyboardButton(text="üëÅ –ù–µ —Å–º–æ—Ç—Ä–µ–ª")],
            [KeyboardButton(text="‚óÄÔ∏è –ö –º–µ–¥–∏–∞")],
        ],
        resize_keyboard=True
    )
    return keyboard

# –ú–µ–Ω—é –ü–æ–¥–∫–∞—Å—Ç–æ–≤
def get_podcasts_submenu():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞—Å—Ç")],
            [KeyboardButton(text="üìã –ú–æ–∏ –ø–æ–¥–∫–∞—Å—Ç—ã")],
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–∞—Å—Ç–æ–≤")],
            [KeyboardButton(text="‚óÄÔ∏è –ö –º–µ–¥–∏–∞")],
        ],
        resize_keyboard=True
    )
    return keyboard

# –ú–µ–Ω—é –∑–∞–º–µ—Ç–æ–∫
def get_notes_submenu():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞")],
            [KeyboardButton(text="üìã –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏")],
            [KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –∑–∞–º–µ—Ç–æ–∫")],
            [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True
    )
    return keyboard

def get_note_category_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–º–µ—Ç–∫–∏"""
    keyboard_layout = [[KeyboardButton(text=cat) for cat in row] for row in NOTE_CATEGORY_BUTTONS]
    keyboard_layout.append([KeyboardButton(text=EMOJI_BACK)])
    keyboard = ReplyKeyboardMarkup(
        keyboard=keyboard_layout,
        resize_keyboard=True
    )
    return keyboard

# –ú–µ–Ω—é –≤–∏—à–ª–∏—Å—Ç–∞
def get_wishlist_submenu():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ")],
            [KeyboardButton(text="üìã –ú–æ–π –≤–∏—à–ª–∏—Å—Ç")],
            [KeyboardButton(text="‚óÄÔ∏è –ö –ª–∏—á–Ω–æ–º—É")],
        ],
        resize_keyboard=True
    )
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∫—É–ø–∫–∏
def get_wishlist_size_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=cat)] for cat in WISHLIST_SIZE_CATEGORIES
        ] + [[KeyboardButton(text=EMOJI_CANCEL)]],
        resize_keyboard=True
    )
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–∫—É–ø–∫–∏
def get_wishlist_type_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=WISHLIST_TYPE_CATEGORIES[0]), KeyboardButton(text=WISHLIST_TYPE_CATEGORIES[1])],
            [KeyboardButton(text=WISHLIST_TYPE_CATEGORIES[2]), KeyboardButton(text=WISHLIST_TYPE_CATEGORIES[3])],
            [KeyboardButton(text=EMOJI_CANCEL)]
        ],
        resize_keyboard=True
    )
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
def get_wishlist_priority_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=cat)] for cat in WISHLIST_PRIORITIES
        ] + [[KeyboardButton(text=EMOJI_CANCEL)]],
        resize_keyboard=True
    )
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è —Ñ–∏–ª—å–º–æ–≤/–ø–æ–¥–∫–∞—Å—Ç–æ–≤
def get_movie_status_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üëÅ –ù–µ —Å–º–æ—Ç—Ä–µ–ª")],
            [KeyboardButton(text="‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–ª")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è —Å–µ—Ä–∏–∞–ª–æ–≤
def get_series_status_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üëÅ –ù–µ —Å–º–æ—Ç—Ä–µ–ª")],
            [KeyboardButton(text="‚è≥ –°–º–æ—Ç—Ä—é")],
            [KeyboardButton(text="‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–ª")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ (1-5 –∑–≤—ë–∑–¥)
def get_rating_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚≠ê"), KeyboardButton(text="‚≠ê‚≠ê"), KeyboardButton(text="‚≠ê‚≠ê‚≠ê")],
            [KeyboardButton(text="‚≠ê‚≠ê‚≠ê‚≠ê"), KeyboardButton(text="‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê")],
            [KeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )
    return keyboard

# –ü–æ–¥–º–µ–Ω—é "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ"
def get_travel_submenu():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üó∫ –ü–ª–∞–Ω—ã –ø–æ–µ–∑–¥–æ–∫")],
            [KeyboardButton(text="‚úàÔ∏è –ü–æ—Å–µ—â–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã")],
            [KeyboardButton(text="üìù –°–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π")],
            [KeyboardButton(text="‚óÄÔ∏è –ö –ª–∏—á–Ω–æ–º—É")],
        ],
        resize_keyboard=True
    )
    return keyboard

# –ü–æ–¥–º–µ–Ω—é "–§–∏–Ω–∞–Ω—Å—ã"
def get_finance_submenu():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üíº –°–º–µ–Ω–∞")],
            [KeyboardButton(text="üõí –ê–≤–∏—Ç–æ")],
            [KeyboardButton(text="üí∏ –†–∞—Å—Ö–æ–¥—ã")],
            [KeyboardButton(text="üìä –û—Ç—á–µ—Ç—ã")],
            [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True
    )
    return keyboard

# –ú–µ–Ω—é –ê–≤–∏—Ç–æ
def get_avito_submenu():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –ù–æ–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞")],
            [KeyboardButton(text="üìã –ú–æ–∏ –ø—Ä–æ–¥–∞–∂–∏")],
            [KeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ê–≤–∏—Ç–æ")],
            [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True
    )
    return keyboard

# –ú–µ–Ω—é –†–∞—Å—Ö–æ–¥–æ–≤
def get_expenses_submenu():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –ù–æ–≤–∞—è —Ç—Ä–∞—Ç–∞")],
            [KeyboardButton(text="üìã –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã")],
            [KeyboardButton(text="üìã –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞—Ç")],
            [KeyboardButton(text="‚óÄÔ∏è –ö —Ñ–∏–Ω–∞–Ω—Å–∞–º")],
        ],
        resize_keyboard=True
    )
    return keyboard

# –ú–µ–Ω—é –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
def get_recurring_expenses_submenu():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å")],
            [KeyboardButton(text="üìã –ú–æ–∏ –ø–ª–∞—Ç–µ–∂–∏")],
            [KeyboardButton(text="‚óÄÔ∏è –ö —Ä–∞—Å—Ö–æ–¥–∞–º")],
        ],
        resize_keyboard=True
    )
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç—Ä–∞—Ç
def get_expense_category_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üçî –ï–¥–∞"), KeyboardButton(text="üéâ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è")],
            [KeyboardButton(text="üëï –û–¥–µ–∂–¥–∞"), KeyboardButton(text="üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
def get_date_choice_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìÖ –°–µ–≥–æ–¥–Ω—è")],
            [KeyboardButton(text="üìÜ –í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏
def get_note_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É")],
            [KeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )
    return keyboard

# –ú–µ–Ω—é —á–∞–µ–≤—ã—Ö
def get_tips_submenu():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –ù–æ–≤–∞—è —Å–º–µ–Ω–∞")],
            [KeyboardButton(text="üìã –ú–æ–∏ —Å–º–µ–Ω—ã")],
            [KeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–º–µ–Ω")],
            [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True
    )
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
def get_skip_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )
    return keyboard

# –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
def get_cancel_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=EMOJI_CANCEL)]],
        resize_keyboard=True
    )
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –º–µ—Å—Ç–∞
def get_place_type_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üç∫ –ë–∞—Ä"), KeyboardButton(text="‚òïÔ∏è –ö–∞—Ñ–µ")],
            [KeyboardButton(text="üçΩ –†–µ—Å—Ç–æ—Ä–∞–Ω"), KeyboardButton(text="üèõ –ú—É–∑–µ–π")],
            [KeyboardButton(text="üå≥ –ü–∞—Ä–∫"), KeyboardButton(text="üìç –õ–æ–∫–∞—Ü–∏—è")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ü–µ–Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
def get_price_category_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üí≤"), KeyboardButton(text="üí≤üí≤"), KeyboardButton(text="üí≤üí≤üí≤")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫—É—Ö–Ω–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
def get_cuisine_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            *[[KeyboardButton(text=cuisine) for cuisine in row] for row in CUISINE_BUTTONS],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–µ—Å—Ç–∞
def get_status_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –ü–æ—Å–µ—â–µ–Ω–æ"), KeyboardButton(text="üìÖ –ü–ª–∞–Ω–∏—Ä—É—é –ø–æ—Å–µ—Ç–∏—Ç—å")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )
    return keyboard

@router.message(CommandStart())
async def command_start_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        f"–°–∞–ª—é—Ç! –ö—É–¥–∞ –ø–æ–π–¥–µ–º? üó∫",
        reply_markup=get_main_menu()
    )

@router.message(Command("help"))
async def command_help_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await message.answer(
        "üìñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "‚ûï <b>–î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ</b> - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ\n"
        "üìã <b>–ú–æ–∏ –º–µ—Å—Ç–∞</b> - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç\n"
        "üîç <b>–ü–æ–∏—Å–∫</b> - –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n"
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> - —Å–∫–æ–ª—å–∫–æ –º–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n\n"
        "–ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Å—Ç–∞ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å:\n"
        "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"
        "‚Ä¢ –ê–¥—Ä–µ—Å\n"
        "‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ\n"
        "‚Ä¢ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—é (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ)",
        parse_mode=ParseMode.HTML
    )

# ===== –ù–ê–í–ò–ì–ê–¶–ò–Ø =====

@router.message(F.text == "üë§ –õ–∏—á–Ω–æ–µ")
async def show_personal_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é '–õ–∏—á–Ω–æ–µ'"""
    await message.answer(
        "üë§ <b>–õ–∏—á–Ω–æ–µ</b>\n\n–í–∞—à–∞ –ª–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:",
        reply_markup=get_personal_submenu(),
        parse_mode=ParseMode.HTML
    )

@router.message(F.text == "üìç –ú–µ—Å—Ç–∞")
async def show_places_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–º–µ–Ω—é '–ú–µ—Å—Ç–∞'"""
    await message.answer(
        "üìç <b>–ú–µ—Å—Ç–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_places_submenu(),
        parse_mode=ParseMode.HTML
    )

@router.message(F.text == "üìö –ò–∑—É—á–µ–Ω–∏–µ")
async def show_learning_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–º–µ–Ω—é '–ò–∑—É—á–µ–Ω–∏–µ'"""
    await message.answer(
        "üìö <b>–ò–∑—É—á–µ–Ω–∏–µ</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=get_learning_submenu(),
        parse_mode=ParseMode.HTML
    )

@router.message(F.text == "üé¨ –ú–µ–¥–∏–∞")
async def show_media_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –º–µ–¥–∏–∞"""
    await message.answer(
        "üé¨ <b>–ú–µ–¥–∏–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:",
        reply_markup=get_media_submenu(),
        parse_mode=ParseMode.HTML
    )

@router.message(F.text == "üé¨ –§–∏–ª—å–º—ã")
async def show_movies_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ñ–∏–ª—å–º–æ–≤"""
    await message.answer(
        "üé¨ <b>–§–∏–ª—å–º—ã</b>",
        reply_markup=get_movies_submenu(),
        parse_mode=ParseMode.HTML
    )

@router.message(F.text == "üì∫ –°–µ—Ä–∏–∞–ª—ã")
async def show_series_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å–µ—Ä–∏–∞–ª–æ–≤"""
    await message.answer(
        "üì∫ <b>–°–µ—Ä–∏–∞–ª—ã</b>",
        reply_markup=get_series_submenu(),
        parse_mode=ParseMode.HTML
    )

@router.message(F.text == "üéô –ü–æ–¥–∫–∞—Å—Ç—ã")
async def show_podcasts_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ–¥–∫–∞—Å—Ç–æ–≤ - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"""
    await message.answer(
        "üéô <b>–ü–æ–¥–∫–∞—Å—Ç—ã</b>\n\nüöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
        reply_markup=get_media_submenu(),
        parse_mode=ParseMode.HTML
    )

@router.message(F.text == "‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ")
async def show_travel_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–º–µ–Ω—é '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ'"""
    await message.answer(
        "‚úàÔ∏è <b>–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ</b>\n\n–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å–≤–æ–∏ –ø–æ–µ–∑–¥–∫–∏:",
        reply_markup=get_travel_submenu(),
        parse_mode=ParseMode.HTML
    )

@router.message(F.text == "üí∞ –§–∏–Ω–∞–Ω—Å—ã")
async def show_finance_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–º–µ–Ω—é '–§–∏–Ω–∞–Ω—Å—ã'"""
    await message.answer(
        "üí∞ <b>–§–∏–Ω–∞–Ω—Å—ã</b>\n\n–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º –±—é–¥–∂–µ—Ç–æ–º:",
        reply_markup=get_finance_submenu(),
        parse_mode=ParseMode.HTML
    )

@router.message(F.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main_menu(message: Message, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_menu()
    )

@router.message(F.text == "‚óÄÔ∏è –ö —Ñ–∏–Ω–∞–Ω—Å–∞–º")
async def back_to_finance_menu(message: Message, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤"""
    await state.clear()
    await message.answer(
        "üí∞ <b>–§–∏–Ω–∞–Ω—Å—ã</b>",
        reply_markup=get_finance_submenu(),
        parse_mode=ParseMode.HTML
    )

@router.message(F.text == "‚óÄÔ∏è –ö —Ä–∞—Å—Ö–æ–¥–∞–º")
async def back_to_expenses_menu(message: Message, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—Ö–æ–¥–æ–≤"""
    await state.clear()
    await message.answer(
        "üí∏ <b>–†–∞—Å—Ö–æ–¥—ã</b>",
        reply_markup=get_expenses_submenu(),
        parse_mode=ParseMode.HTML
    )

@router.message(F.text == "‚óÄÔ∏è –ö –∏–∑—É—á–µ–Ω–∏—é")
async def back_to_learning_menu(message: Message, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∏–∑—É—á–µ–Ω–∏—è"""
    await state.clear()
    await message.answer(
        "üìö <b>–ò–∑—É—á–µ–Ω–∏–µ</b>",
        reply_markup=get_learning_submenu(),
        parse_mode=ParseMode.HTML
    )

@router.message(F.text == "‚óÄÔ∏è –ö –º–µ–¥–∏–∞")
async def back_to_media_menu(message: Message, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –º–µ–¥–∏–∞"""
    await state.clear()
    await message.answer(
        "üé¨ <b>–ú–µ–¥–∏–∞</b>",
        reply_markup=get_media_submenu(),
        parse_mode=ParseMode.HTML
    )

@router.message(F.text == "‚óÄÔ∏è –ö –ª–∏—á–Ω–æ–º—É")
async def back_to_personal_menu(message: Message, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –ª–∏—á–Ω–æ–≥–æ"""
    await state.clear()
    await message.answer(
        "üë§ <b>–õ–∏—á–Ω–æ–µ</b>",
        reply_markup=get_personal_submenu(),
        parse_mode=ParseMode.HTML
    )

# ===== –ù–û–í–´–ï –†–ê–ó–î–ï–õ–´ (–∑–∞–≥–ª—É—à–∫–∏) =====

@router.message(F.text == "üìù –ë—ã—Å—Ç—Ä–∞—è –∑–∞–º–µ—Ç–∫–∞")
async def quick_note_handler(message: Message):
    """–ë—ã—Å—Ç—Ä–∞—è –∑–∞–º–µ—Ç–∫–∞ - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await message.answer(
        "üìù <b>–ë—ã—Å—Ç—Ä–∞—è –∑–∞–º–µ—Ç–∫–∞</b>",
        reply_markup=get_notes_submenu(),
        parse_mode=ParseMode.HTML
    )

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ó–ê–ú–ï–¢–û–ö ====================

@router.message(F.text == "‚ûï –ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞")
async def add_note_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏"""
    user_note_data[message.from_user.id] = {}
    await state.set_state(QuickNoteStates.waiting_for_category)
    await message.answer(
        "üìù –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–º–µ—Ç–∫–∏:",
        reply_markup=get_note_category_keyboard()
    )

@router.message(QuickNoteStates.waiting_for_category)
async def process_note_category(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–º–µ—Ç–∫–∏"""
    if message.text == EMOJI_BACK:
        await state.clear()
        del user_note_data[message.from_user.id]
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_notes_submenu())
        return
    
    category = NOTE_CATEGORIES.get(message.text)
    if not category:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=get_note_category_keyboard())
        return
    
    user_note_data[message.from_user.id]['category'] = category
    await state.set_state(QuickNoteStates.waiting_for_text)
    await message.answer(
        f"{message.text}\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:",
        reply_markup=get_cancel_keyboard()
    )

@router.message(QuickNoteStates.waiting_for_text)
async def process_note_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∑–∞–º–µ—Ç–∫–∏"""
    if message.text == EMOJI_CANCEL:
        await state.clear()
        del user_note_data[message.from_user.id]
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_notes_submenu())
        return
    
    user_id = message.from_user.id
    user_name = message.from_user.full_name
    category = user_note_data[user_id]['category']
    text = message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    note_id = await db.add_note(user_id, category, text)
    
    if note_id:
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets
        note_data = {
            'id': note_id,
            'category': category,
            'text': text
        }
        await asyncio.to_thread(google_sheets.add_note, user_id, user_name, note_data)
        
        await message.answer(
            f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n"
            f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
            f"üìù {text}",
            reply_markup=get_notes_submenu()
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏",
            reply_markup=get_notes_submenu()
        )
    
    await state.clear()
    del user_note_data[user_id]

@router.message(F.text == "üìã –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏")
async def show_my_notes(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫"""
    user_id = message.from_user.id
    notes = await db.get_user_notes(user_id, limit=NOTES_PER_PAGE)
    total_count = await db.count_user_notes(user_id)
    
    if not notes:
        await message.answer(
            "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.",
            reply_markup=get_notes_submenu()
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞–º–µ—Ç–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    for note in notes:
        note_date = format_date(note['created_at'])
        text = f"üìù <b>{note['category']}</b> ({note_date})\n\n{note['text']}"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_note_{note['id']}"),
                InlineKeyboardButton(text=EMOJI_DELETE, callback_data=f"delete_note_{note['id']}")
            ]
        ])
        
        await message.answer(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ
    if total_count > NOTES_PER_PAGE:
        await message.answer(
            f"üìä –ü–æ–∫–∞–∑–∞–Ω–æ {len(notes)} –∏–∑ {total_count} –∑–∞–º–µ—Ç–æ–∫",
            reply_markup=get_notes_submenu()
        )
    else:
        await message.answer(
            f"üìä –í—Å–µ–≥–æ –∑–∞–º–µ—Ç–æ–∫: {total_count}",
            reply_markup=get_notes_submenu()
        )

@router.callback_query(F.data.startswith("edit_note_"))
async def edit_note_callback(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É"""
    note_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    await state.update_data(note_id=note_id)
    await state.set_state(QuickNoteStates.waiting_for_edit)
    
    await callback.message.answer(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:",
        reply_markup=get_cancel_keyboard()
    )
    await callback.answer()

@router.message(QuickNoteStates.waiting_for_edit)
async def process_note_edit(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏"""
    if message.text == EMOJI_CANCEL:
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_notes_submenu())
        return
    
    data = await state.get_data()
    note_id = data.get('note_id')
    user_id = message.from_user.id
    new_text = message.text
    
    success = await db.update_note(note_id, user_id, new_text)
    
    if success:
        await message.answer(
            f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\nüìù {new_text}",
            reply_markup=get_notes_submenu()
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏",
            reply_markup=get_notes_submenu()
        )
    
    await state.clear()

@router.callback_query(F.data.startswith("delete_note_"))
async def delete_note_callback(callback: CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"""
    note_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    success = await db.delete_note(note_id, user_id)
    
    if success:
        # –£–¥–∞–ª—è–µ–º –∏–∑ Google Sheets
        await asyncio.to_thread(google_sheets.delete_note, note_id)
        
        await callback.message.edit_text("‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞")
        await callback.answer("–£–¥–∞–ª–µ–Ω–æ", show_alert=False)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)

@router.message(F.text == "üîç –ü–æ–∏—Å–∫ –∑–∞–º–µ—Ç–æ–∫")
async def search_notes_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫"""
    await state.set_state(SearchNotesStates.waiting_for_query)
    await message.answer(
        "üîç –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=get_cancel_keyboard()
    )

@router.message(SearchNotesStates.waiting_for_query)
async def process_search_notes(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫"""
    if message.text == EMOJI_CANCEL:
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_notes_submenu())
        return
    
    user_id = message.from_user.id
    search_text = message.text
    
    notes = await db.search_notes(user_id, search_text)
    
    if not notes:
        await message.answer(
            f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É ¬´{search_text}¬ª –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
            reply_markup=get_notes_submenu()
        )
        await state.clear()
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
    for note in notes:
        note_date = format_date(note['created_at'])
        text = f"üìù <b>{note['category']}</b> ({note_date})\n\n{note['text']}"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_note_{note['id']}"),
                InlineKeyboardButton(text=EMOJI_DELETE, callback_data=f"delete_note_{note['id']}")
            ]
        ])
        
        await message.answer(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
    
    await message.answer(
        f"üîç –ù–∞–π–¥–µ–Ω–æ –∑–∞–º–µ—Ç–æ–∫: {len(notes)}",
        reply_markup=get_notes_submenu()
    )
    await state.clear()

@router.message(F.text == "üé• –í–∏–¥–µ–æ–≥—Ä–∞—Ñ–∏—è")
async def videography_handler(message: Message):
    """–í–∏–¥–µ–æ–≥—Ä–∞—Ñ–∏—è"""
    await message.answer(
        "üé• <b>–í–∏–¥–µ–æ–≥—Ä–∞—Ñ–∏—è</b>",
        reply_markup=get_videography_submenu(),
        parse_mode=ParseMode.HTML
    )

@router.message(F.text == "üí° –ò–¥–µ–∏")
async def videography_ideas_handler(message: Message):
    """–ò–¥–µ–∏ –¥–ª—è –≤–∏–¥–µ–æ–≥—Ä–∞—Ñ–∏–∏"""
    await message.answer(
        "üí° <b>–ò–¥–µ–∏ –¥–ª—è —Å—ä—ë–º–æ–∫</b>\n\n"
        "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
        reply_markup=get_videography_submenu(),
        parse_mode=ParseMode.HTML
    )

# –í–∏—à–ª–∏—Å—Ç –¥–ª—è –≤–∏–¥–µ–æ–≥—Ä–∞—Ñ–∏–∏ - –∑–∞–≥–ª—É—à–∫–∞ —É–¥–∞–ª–µ–Ω–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∏—à–ª–∏—Å—Ç)

@router.message(F.text == "üì∏ –ö–∞–¥—Ä")
async def videography_frame_handler(message: Message):
    """–ö–∞–¥—Ä"""
    await message.answer(
        "üì∏ <b>–ö–∞–¥—Ä</b>\n\n"
        "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
        reply_markup=get_videography_submenu(),
        parse_mode=ParseMode.HTML
    )

@router.message(F.text == "üìî –î–Ω–µ–≤–Ω–∏–∫")
async def diary_handler(message: Message):
    """–î–Ω–µ–≤–Ω–∏–∫"""
    await message.answer(
        "üìî <b>–î–Ω–µ–≤–Ω–∏–∫</b>\n\n"
        "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
        reply_markup=get_personal_submenu(),
        parse_mode=ParseMode.HTML
    )

@router.message(F.text == "üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
async def workouts_handler(message: Message):
    """–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    await message.answer(
        "üí™ <b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</b>\n\n"
        "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
        reply_markup=get_personal_submenu(),
        parse_mode=ParseMode.HTML
    )

# –í–∏—à–ª–∏—Å—Ç - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∏–∂–µ (—Å—Ç—Ä–æ–∫–∞ ~3568)

# ===== –î–û–ë–ê–í–õ–ï–ù–ò–ï –ú–ï–°–¢–ê =====

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ")
async def add_place_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–∞"""
    user_place_data[message.from_user.id] = {}
    await state.set_state(AddPlaceStates.waiting_for_name)
    await message.answer(
        "üìç –ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —ç—Ç–æ –º–µ—Å—Ç–æ?",
        reply_markup=get_cancel_keyboard()
    )

@router.message(AddPlaceStates.waiting_for_name)
async def process_place_name(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—Ç–∞ –∏ –ø–æ–∏—Å–∫ –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_menu())
        return
    
    query = message.text
    
    # –ò—â–µ–º –º–µ—Å—Ç–æ –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö
    await message.answer("üîç –ò—â—É –º–µ—Å—Ç–æ –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö...")
    places = await search_place_yandex(query, limit=7)
    
    if not places:
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—ã–π flow
        user_place_data[message.from_user.id]['name'] = message.text.capitalize()
        user_place_data[message.from_user.id]['yandex_data'] = None
        await state.set_state(AddPlaceStates.waiting_for_type)
        await message.answer(
            "‚ùå –ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö.\n\n"
            "üè∑ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ—Å—Ç–∞ –≤—Ä—É—á–Ω—É—é:",
            reply_markup=get_place_type_keyboard()
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    user_place_data[message.from_user.id]['search_results'] = places
    user_place_data[message.from_user.id]['search_query'] = query
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
    keyboard_buttons = []
    for i, place in enumerate(places, 1):
        display_name = place.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        address = place.get('description', '')
        button_text = f"{i}. {display_name}"
        if address:
            button_text += f"\n   {address}"
        keyboard_buttons.append([KeyboardButton(text=button_text)])
    
    keyboard_buttons.append([KeyboardButton(text="‚ùå –ù–µ –Ω–∞—à—ë–ª, –≤–≤–µ–¥—É –≤—Ä—É—á–Ω—É—é")])
    keyboard_buttons.append([KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")])
    
    keyboard = ReplyKeyboardMarkup(keyboard=keyboard_buttons, resize_keyboard=True)
    
    await state.set_state(AddPlaceStates.choosing_from_search)
    await message.answer(
        f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –º–µ—Å—Ç: {len(places)}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞:",
        reply_markup=keyboard
    )

@router.message(AddPlaceStates.choosing_from_search)
async def process_place_selection(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_menu())
        return
    
    if message.text == "‚ùå –ù–µ –Ω–∞—à—ë–ª, –≤–≤–µ–¥—É –≤—Ä—É—á–Ω—É—é":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä—É—á–Ω–æ–º—É –≤–≤–æ–¥—É
        query = user_place_data[message.from_user.id].get('search_query', '–ú–µ—Å—Ç–æ')
        user_place_data[message.from_user.id]['name'] = query.capitalize()
        user_place_data[message.from_user.id]['yandex_data'] = None
        await state.set_state(AddPlaceStates.waiting_for_type)
        await message.answer(
            "üìù –•–æ—Ä–æ—à–æ, –∑–∞–ø–æ–ª–Ω–∏–º –≤—Ä—É—á–Ω—É—é.\n\n"
            "üè∑ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ—Å—Ç–∞:",
            reply_markup=get_place_type_keyboard()
        )
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–∞
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä –∏–∑ –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
        place_num = int(message.text.split('.')[0]) - 1
        search_results = user_place_data[message.from_user.id].get('search_results', [])
        
        if 0 <= place_num < len(search_results):
            selected_place = search_results[place_num]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ
            user_place_data[message.from_user.id]['selected_yandex_place'] = selected_place
            user_place_data[message.from_user.id]['name'] = selected_place.get('name', '–ú–µ—Å—Ç–æ')
            
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–ª–∏ –≤—Ä—É—á–Ω—É—é
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="ü§ñ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")],
                    [KeyboardButton(text="‚úçÔ∏è –ó–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Ä—É—á–Ω—É—é")],
                    [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
                ],
                resize_keyboard=True
            )
            
            await state.set_state(AddPlaceStates.choosing_fill_method)
            await message.answer(
                f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: <b>{selected_place.get('name')}</b>\n"
                f"üìç {selected_place.get('description', '')}\n\n"
                "–ö–∞–∫ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ?",
                parse_mode=ParseMode.HTML,
                reply_markup=keyboard
            )
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞.")
    except (ValueError, IndexError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞.")

@router.message(AddPlaceStates.choosing_fill_method)
async def process_fill_method(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–ª–∏ –≤—Ä—É—á–Ω—É—é"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_menu())
        return
    
    selected_place = user_place_data[message.from_user.id].get('selected_yandex_place')
    
    if message.text == "ü§ñ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏":
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –º–µ—Å—Ç–∞ –∏–∑ Yandex API
        await message.answer("‚è≥ –ü–æ–ª—É—á–∞—é –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")
        
        latitude = selected_place.get('latitude')
        longitude = selected_place.get('longitude')
        
        details = await get_place_details_yandex(latitude, longitude)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        user_place_data[message.from_user.id]['name'] = selected_place.get('name', '–ú–µ—Å—Ç–æ')
        user_place_data[message.from_user.id]['address'] = details.get('address') or selected_place.get('address')
        user_place_data[message.from_user.id]['latitude'] = latitude
        user_place_data[message.from_user.id]['longitude'] = longitude
        user_place_data[message.from_user.id]['cuisine'] = details.get('cuisine')
        user_place_data[message.from_user.id]['working_hours'] = details.get('working_hours')
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —à–∞–≥–∏ –∏ —Å—Ä–∞–∑—É —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∏–ø –º–µ—Å—Ç–∞
        await state.set_state(AddPlaceStates.waiting_for_type)
        await message.answer(
            f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã!\n\n"
            f"üìç <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {user_place_data[message.from_user.id]['name']}\n"
            f"üó∫ <b>–ê–¥—Ä–µ—Å:</b> {user_place_data[message.from_user.id].get('address', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üçΩ <b>–ö—É—Ö–Ω—è:</b> {user_place_data[message.from_user.id].get('cuisine', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')}\n"
            f"üïê <b>–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:</b> {user_place_data[message.from_user.id].get('working_hours', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n\n"
            "üè∑ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ—Å—Ç–∞:",
            parse_mode=ParseMode.HTML,
            reply_markup=get_place_type_keyboard()
        )
    
    elif message.text == "‚úçÔ∏è –ó–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Ä—É—á–Ω—É—é":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä—É—á–Ω–æ–º—É –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é
        user_place_data[message.from_user.id]['latitude'] = selected_place.get('latitude')
        user_place_data[message.from_user.id]['longitude'] = selected_place.get('longitude')
        
        await state.set_state(AddPlaceStates.waiting_for_type)
        await message.answer(
            "üìù –•–æ—Ä–æ—à–æ, –∑–∞–ø–æ–ª–Ω–∏–º –≤—Ä—É—á–Ω—É—é.\n\n"
            "üè∑ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ—Å—Ç–∞:",
            reply_markup=get_place_type_keyboard()
        )
    else:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")

@router.message(AddPlaceStates.waiting_for_type)
async def process_place_type(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –º–µ—Å—Ç–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_menu())
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –º–µ—Å—Ç–∞
    user_place_data[message.from_user.id]['place_type'] = message.text
    
    # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –∫—É—Ö–Ω—é
    if message.text == "üçΩ –†–µ—Å—Ç–æ—Ä–∞–Ω":
        await state.set_state(AddPlaceStates.waiting_for_cuisine)
        await message.answer(
            "üçΩ –ö–∞–∫–∞—è –∫—É—Ö–Ω—è –≤ —ç—Ç–æ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ?",
            reply_markup=get_cuisine_keyboard()
        )
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ —Ü–µ–Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è (–¥–ª—è –∫–∞—Ñ–µ, –±–∞—Ä–æ–≤)
    elif message.text in ["üç∫ –ë–∞—Ä", "‚òïÔ∏è –ö–∞—Ñ–µ"]:
        await state.set_state(AddPlaceStates.waiting_for_price)
        await message.answer(
            "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=get_price_category_keyboard()
        )
    else:
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å—Ç–∞—Ç—É—Å–∞
        await state.set_state(AddPlaceStates.waiting_for_status)
        await message.answer(
            "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –º–µ—Å—Ç–∞:",
            reply_markup=get_status_keyboard()
        )

@router.message(AddPlaceStates.waiting_for_cuisine)
async def process_cuisine(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫—É—Ö–Ω–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_menu())
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –∫—É—Ö–Ω–∏
    if message.text in CUISINE_TYPES:
        user_place_data[message.from_user.id]['cuisine'] = CUISINE_TYPES[message.text]
    
    # –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫—É—Ö–Ω–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ü–µ–Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await state.set_state(AddPlaceStates.waiting_for_price)
    await message.answer(
        "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=get_price_category_keyboard()
    )

@router.message(AddPlaceStates.waiting_for_price)
async def process_price_category(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_menu())
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    user_place_data[message.from_user.id]['price_category'] = message.text
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å—Ç–∞—Ç—É—Å–∞
    await state.set_state(AddPlaceStates.waiting_for_status)
    await message.answer(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –º–µ—Å—Ç–∞:",
        reply_markup=get_status_keyboard()
    )

@router.message(AddPlaceStates.waiting_for_status)
async def process_status(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–µ—Å—Ç–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_menu())
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
    if message.text == "‚úÖ –ü–æ—Å–µ—â–µ–Ω–æ":
        user_place_data[message.from_user.id]['status'] = 'visited'
        
        # –ï—Å–ª–∏ –ø–æ—Å–µ—â–µ–Ω–æ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞–ø–∏—Å–∞—Ç—å —Ä–µ—Ü–µ–Ω–∑–∏—é
        await state.set_state(AddPlaceStates.waiting_for_review)
        await message.answer(
            "‚≠êÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –º–∏–Ω–∏-—Ä–µ—Ü–µ–Ω–∑–∏—é –æ –º–µ—Å—Ç–µ\n\n"
            "–ß—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å? –í–∞—à–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è?",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")],
                    [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
                ],
                resize_keyboard=True
            )
        )
    elif message.text == "üìÖ –ü–ª–∞–Ω–∏—Ä—É—é –ø–æ—Å–µ—Ç–∏—Ç—å":
        user_place_data[message.from_user.id]['status'] = 'planned'
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ—Ü–µ–Ω–∑–∏—é, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∞–¥—Ä–µ—Å—É
        await state.set_state(AddPlaceStates.waiting_for_address)
        await message.answer(
            "üìÆ –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –º–µ—Å—Ç–∞\n\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', –µ—Å–ª–∏ –∞–¥—Ä–µ—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")],
                    [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
                ],
                resize_keyboard=True
            )
        )

@router.message(AddPlaceStates.waiting_for_review)
async def process_review(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ü–µ–Ω–∑–∏–∏"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_menu())
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ü–µ–Ω–∑–∏—é (–µ—Å–ª–∏ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏)
    if message.text != "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        user_place_data[message.from_user.id]['review'] = message.text
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∞–¥—Ä–µ—Å—É
    await state.set_state(AddPlaceStates.waiting_for_address)
    await message.answer(
        "üìÆ –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –º–µ—Å—Ç–∞\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', –µ—Å–ª–∏ –∞–¥—Ä–µ—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")],
                [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
            ],
            resize_keyboard=True
        )
    )

@router.message(AddPlaceStates.waiting_for_address)
async def process_place_address(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –º–µ—Å—Ç–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_menu())
        return
    
    if message.text != "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        user_place_data[message.from_user.id]['address'] = message.text
    
    await state.set_state(AddPlaceStates.waiting_for_description)
    await message.answer(
        "üìù –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –∑–∞–º–µ—Ç–∫—É",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")],
                [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
            ],
            resize_keyboard=True
        )
    )

@router.message(AddPlaceStates.waiting_for_description)
async def process_place_description(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –º–µ—Å—Ç–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_menu())
        return
    
    if message.text != "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        user_place_data[message.from_user.id]['description'] = message.text
    
    await state.set_state(AddPlaceStates.waiting_for_social)
    await message.answer(
        "üì± –í–≤–µ–¥–∏—Ç–µ Instagram –∏–ª–∏ Telegram —á–µ—Ä–µ–∑ @\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>@username</code>\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")],
                [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
            ],
            resize_keyboard=True
        ),
        parse_mode=ParseMode.HTML
    )

@router.message(AddPlaceStates.waiting_for_social)
async def process_place_social(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_menu())
        return
    
    if message.text != "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        social_link = message.text.strip()
        if not social_link.startswith('@'):
            social_link = '@' + social_link
        user_place_data[message.from_user.id]['social_link'] = social_link
    
    await state.set_state(AddPlaceStates.waiting_for_location)
    await message.answer(
        "üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –º–µ—Å—Ç–∞\n\n"
        "üó∫ <b>–°–ø–æ—Å–æ–±—ã:</b>\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ üìé ‚Üí –ì–µ–æ–ø–æ–∑–∏—Ü–∏—è (–≤ Telegram)\n"
        "‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>55.7558, 37.6173</code>)\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å' –±–µ–∑ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –±–µ–∑ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏")],
                [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
            ],
            resize_keyboard=True
        ),
        parse_mode=ParseMode.HTML
    )

@router.message(AddPlaceStates.waiting_for_location, F.location)
async def process_location(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    user_place_data[message.from_user.id]['latitude'] = message.location.latitude
    user_place_data[message.from_user.id]['longitude'] = message.location.longitude
    await save_place(message, state)

@router.message(AddPlaceStates.waiting_for_location, F.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –±–µ–∑ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏")
async def process_skip_location(message: Message, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    await save_place(message, state)

@router.message(AddPlaceStates.waiting_for_location, F.text)
async def process_text_coordinates(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        return  # –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–ª–µ–¥—É—é—â–∏–º —Ö—ç–Ω–¥–ª–µ—Ä–æ–º
    
    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—ã: "55.7558, 37.6173" –∏–ª–∏ "55.7558,37.6173" –∏–ª–∏ "55.7558 37.6173"
    text = message.text.strip().replace(',', ' ')
    parts = text.split()
    
    if len(parts) == 2:
        try:
            lat = float(parts[0])
            lon = float(parts[1])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            if -90 <= lat <= 90 and -180 <= lon <= 180:
                user_place_data[message.from_user.id]['latitude'] = lat
                user_place_data[message.from_user.id]['longitude'] = lon
                await save_place(message, state)
            else:
                await message.answer(
                    "‚ùå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞\n\n"
                    "–®–∏—Ä–æ—Ç–∞: –æ—Ç -90 –¥–æ 90\n"
                    "–î–æ–ª–≥–æ—Ç–∞: –æ—Ç -180 –¥–æ 180\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å'"
                )
        except ValueError:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã\n\n"
                "–§–æ—Ä–º–∞—Ç: <code>—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞</code>\n"
                "–ü—Ä–∏–º–µ—Ä: <code>55.7558, 37.6173</code>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å'",
                parse_mode=ParseMode.HTML
            )
    else:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç\n\n"
            "–§–æ—Ä–º–∞—Ç: <code>—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞</code>\n"
            "–ü—Ä–∏–º–µ—Ä: <code>55.7558, 37.6173</code>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å'",
            parse_mode=ParseMode.HTML
        )

@router.message(AddPlaceStates.waiting_for_location, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def process_cancel_location(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
    await state.clear()
    user_place_data.pop(message.from_user.id, None)
    await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_menu())

async def save_place(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Å—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    data = user_place_data.get(message.from_user.id, {})
    
    place_id = await db.add_place(
        user_id=message.from_user.id,
        name=data.get('name'),
        place_type=data.get('place_type'),
        price_category=data.get('price_category'),
        status=data.get('status', 'visited'),
        review=data.get('review'),
        address=data.get('address'),
        description=data.get('description'),
        latitude=data.get('latitude'),
        longitude=data.get('longitude'),
        social_link=data.get('social_link'),
        cuisine=data.get('cuisine'),
        working_hours=data.get('working_hours')
    )
    
    # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å)
    cache.clear(pattern=f"_{message.from_user.id}")
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Google Sheets (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è –±–æ—Ç–∞)
    place_data_with_id = {**data, 'id': place_id}
    asyncio.create_task(asyncio.to_thread(
        google_sheets.add_place,
        user_id=message.from_user.id,
        user_name=message.from_user.full_name,
        place_data=place_data_with_id
    ))
    
    response = f"‚úÖ –ú–µ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n"
    response += f"üìç <b>{data.get('name')}</b>\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å (—Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è)
    if data.get('status') == 'visited':
        response += f"‚úÖ –ü–æ—Å–µ—â–µ–Ω–æ\n"
    elif data.get('status') == 'planned':
        response += f"üìÖ –ü–ª–∞–Ω–∏—Ä—É—é –ø–æ—Å–µ—Ç–∏—Ç—å\n"
    
    if data.get('place_type'):
        response += f"üè∑ {data.get('place_type')}"
        if data.get('price_category'):
            response += f" {data.get('price_category')}"
        # –î–æ–±–∞–≤–ª—è–µ–º –∫—É—Ö–Ω—é –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
        if data.get('cuisine'):
            response += f" ‚Ä¢ {data.get('cuisine')}"
        response += "\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ—Ü–µ–Ω–∑–∏—é
    if data.get('review'):
        response += f"‚≠êÔ∏è <i>{data.get('review')}</i>\n"
    
    if data.get('address'):
        response += f"üìÆ {data.get('address')}\n"
    if data.get('working_hours'):
        response += f"üïê {data.get('working_hours')}\n"
    if data.get('description'):
        response += f"üìù {data.get('description')}\n"
    if data.get('latitude') and data.get('longitude'):
        response += f"üó∫ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"
    
    await message.answer(response, parse_mode=ParseMode.HTML, reply_markup=get_places_submenu())
    
    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    user_place_data.pop(message.from_user.id, None)
    await state.clear()

# ===== –ü–†–û–°–ú–û–¢–† –ú–ï–°–¢ =====

@router.message(F.text == "üìã –ú–æ–∏ –º–µ—Å—Ç–∞")
async def show_places(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ—Å—Ç"""
    places = await db.get_user_places(message.from_user.id)
    
    if not places:
        await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç.\n"
            "–ù–∞–∂–º–∏—Ç–µ '‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ' –¥–ª—è –Ω–∞—á–∞–ª–∞!",
            reply_markup=get_main_menu()
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ—Å–µ—â–µ–Ω–Ω—ã–µ", callback_data="filter_status_visited"),
            InlineKeyboardButton(text="üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", callback_data="filter_status_planned")
        ],
        [
            InlineKeyboardButton(text="üç∫ –ë–∞—Ä—ã", callback_data="filter_üç∫ –ë–∞—Ä"),
            InlineKeyboardButton(text="‚òïÔ∏è –ö–∞—Ñ–µ", callback_data="filter_‚òïÔ∏è –ö–∞—Ñ–µ")
        ],
        [
            InlineKeyboardButton(text="üçΩ –†–µ—Å—Ç–æ—Ä–∞–Ω—ã", callback_data="filter_üçΩ –†–µ—Å—Ç–æ—Ä–∞–Ω"),
            InlineKeyboardButton(text="üèõ –ú—É–∑–µ–∏", callback_data="filter_üèõ –ú—É–∑–µ–π")
        ],
        [
            InlineKeyboardButton(text="üå≥ –ü–∞—Ä–∫–∏", callback_data="filter_üå≥ –ü–∞—Ä–∫"),
            InlineKeyboardButton(text="üìç –õ–æ–∫–∞—Ü–∏–∏", callback_data="filter_üìç –õ–æ–∫–∞—Ü–∏—è")
        ],
        [
            InlineKeyboardButton(text="üìã –í—Å–µ –º–µ—Å—Ç–∞", callback_data="filter_all")
        ]
    ])
    
    await message.answer(
        f"üìã <b>–£ –≤–∞—Å {len(places)} –º–µ—Å—Ç</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard
    )

async def show_places_page(message_or_callback, user_id: int, filter_type: str = "all", status_filter: str = None, offset: int = 0):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–µ—Å—Ç —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –Ω–∞ —É—Ä–æ–≤–Ω–µ –ë–î (–±—ã—Å—Ç—Ä–µ–µ)
    if filter_type == "all" and not status_filter:
        places = await db.get_user_places(user_id, limit=PLACES_PER_PAGE, offset=offset)
        total_count = await db.count_user_places(user_id)
    elif status_filter:
        places = await db.get_user_places(user_id, place_type=(filter_type if filter_type != "all" else None), status=status_filter, limit=PLACES_PER_PAGE, offset=offset)
        total_count = await db.count_user_places(user_id, place_type=(filter_type if filter_type != "all" else None), status=status_filter)
    else:
        places = await db.get_user_places(user_id, place_type=filter_type, limit=PLACES_PER_PAGE, offset=offset)
        total_count = await db.count_user_places(user_id, place_type=filter_type)
    
    if not places:
        return False, 0
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ—Å—Ç–∞
    category_name = filter_type if filter_type == "all" else filter_type
    
    for place in places:
        buttons = []
        
        # –ö–Ω–æ–ø–∫–∞ "–ü–æ—Å–µ—Ç–∏–ª" - —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç
        if place.get('status') == 'planned':
            buttons.append([InlineKeyboardButton(text="‚úÖ –ü–æ—Å–µ—Ç–∏–ª", callback_data=f"mark_visited_{place['id']}")])
        
        # –ö–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ" - –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–ª–∏ –∞–¥—Ä–µ—Å
        if place.get('latitude') and place.get('longitude'):
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã - –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ
            yandex_maps_url = f"https://yandex.ru/maps/?pt={place['longitude']},{place['latitude']}&z=16&l=map"
            buttons.append([InlineKeyboardButton(text="üó∫ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã", url=yandex_maps_url)])
        elif place.get('address'):
            # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –∞–¥—Ä–µ—Å - –ø–æ–∏—Å–∫ –ø–æ –∞–¥—Ä–µ—Å—É
            address_encoded = urllib.parse.quote(place['address'])
            yandex_maps_url = f"https://yandex.ru/maps/?text={address_encoded}"
            buttons.append([InlineKeyboardButton(text="üó∫ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã (–ø–æ–∏—Å–∫)", url=yandex_maps_url)])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏, –µ—Å–ª–∏ –æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞
        if place.get('social_link'):
            social_link = place['social_link']
            if social_link.startswith('@'):
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, Instagram –∏–ª–∏ Telegram (—É–ø—Ä–æ—â—ë–Ω–Ω–æ)
                if 'tg://' in social_link or 't.me' in social_link:
                    url = f"https://t.me/{social_link[1:]}"
                    text_btn = "üì± Telegram"
                else:
                    url = f"https://instagram.com/{social_link[1:]}"
                    text_btn = "üì∑ Instagram"
                buttons.append([InlineKeyboardButton(text=text_btn, url=url)])
        
        buttons.append([InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{place['id']}")])
        buttons.append([InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{place['id']}")])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        text = f"üìç <b>{place['name']}</b>\n"
        if place.get('place_type'):
            text += f"üè∑ {place['place_type']}"
            if place.get('price_category'):
                text += f" {place['price_category']}"
            # –î–æ–±–∞–≤–ª—è–µ–º –∫—É—Ö–Ω—é –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
            if place.get('cuisine'):
                text += f" ‚Ä¢ {place['cuisine']}"
            text += "\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        if place.get('status') == 'visited':
            text += f"‚úÖ –ü–æ—Å–µ—â–µ–Ω–æ\n"
        elif place.get('status') == 'planned':
            text += f"üìÖ –ü–ª–∞–Ω–∏—Ä—É—é –ø–æ—Å–µ—Ç–∏—Ç—å\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ—Ü–µ–Ω–∑–∏—é
        if place.get('review'):
            text += f"‚≠êÔ∏è <i>{place['review']}</i>\n"
        
        if place['address']:
            text += f"üìÆ {place['address']}\n"
        if place.get('working_hours'):
            text += f"üïê –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {place['working_hours']}\n"
        if place['description']:
            text += f"üìù {place['description']}\n"
        text += f"\nüìÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {format_date(place['created_at'])}"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–¥–∏–Ω —Ä–∞–∑
        target = message_or_callback.message if hasattr(message_or_callback, 'message') else message_or_callback
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await target.answer(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard
        )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ" –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –º–µ—Å—Ç–∞
    has_more = (offset + PLACES_PER_PAGE) < total_count
    if has_more:
        target = message_or_callback.message if hasattr(message_or_callback, 'message') else message_or_callback
        more_button = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text=f"üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ ({total_count - offset - PLACES_PER_PAGE} –æ—Å—Ç–∞–ª–æ—Å—å)",
                callback_data=f"more_{filter_type}_{offset + PLACES_PER_PAGE}"
            )]
        ])
        await target.answer("üëá", reply_markup=more_button)
    
    return True, total_count

@router.callback_query(F.data.startswith("filter_"))
async def filter_places(callback: CallbackQuery):
    """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–µ—Å—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ —Å—Ç–∞—Ç—É—Å—É"""
    filter_data = callback.data.replace("filter_", "")
    
    await callback.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É –∏–ª–∏ –ø–æ —Ç–∏–ø—É
    if filter_data.startswith("status_"):
        status_filter = filter_data.replace("status_", "")
        filter_type = "all"
        if status_filter == "visited":
            header = "‚úÖ <b>–ü–æ—Å–µ—â–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞</b>"
        else:
            header = "üìÖ <b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞</b>"
    else:
        status_filter = None
        filter_type = filter_data
        header = f"üìã <b>–í—Å–µ –º–µ—Å—Ç–∞</b>" if filter_type == "all" else f"<b>{filter_type}</b>"
    
    await callback.message.answer(header, parse_mode=ParseMode.HTML)
    
    success, total = await show_places_page(callback, callback.from_user.id, filter_type, status_filter, 0)
    
    if not success:
        await callback.message.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –º–µ—Å—Ç")

@router.callback_query(F.data.startswith("more_"))
async def load_more_places(callback: CallbackQuery):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ –º–µ—Å—Ç–∞"""
    parts = callback.data.split("_")
    filter_type = parts[1]
    offset = int(parts[2])
    
    await callback.answer()
    await callback.message.delete()  # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ"
    
    success, total = await show_places_page(callback, callback.from_user.id, filter_type, offset)
    
    if not success:
        await callback.message.answer("–ë–æ–ª—å—à–µ –º–µ—Å—Ç –Ω–µ—Ç")

@router.callback_query(F.data.startswith("mark_visited_"))
async def mark_place_visited(callback: CallbackQuery):
    """–ü–æ–º–µ—Ç–∏—Ç—å –º–µ—Å—Ç–æ –∫–∞–∫ –ø–æ—Å–µ—â–µ–Ω–Ω–æ–µ"""
    place_id = int(callback.data.split("_")[2])
    place = await db.get_place(place_id, callback.from_user.id)
    
    if not place:
        await callback.answer("–ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "visited"
    await db.update_place(place_id, callback.from_user.id, status='visited')
    
    # –û—á–∏—â–∞–µ–º –∫—ç—à
    cache.clear(pattern=f"_{callback.from_user.id}")
    
    await callback.answer("‚úÖ –ú–µ—Å—Ç–æ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø–æ—Å–µ—â–µ–Ω–Ω–æ–µ!")
    await callback.message.answer(
        f"‚úÖ <b>{place['name']}</b> –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤ –ø–æ—Å–µ—â–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞!",
        parse_mode=ParseMode.HTML
    )

def get_edit_place_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Å—Ç–∞"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìù –ù–∞–∑–≤–∞–Ω–∏–µ"), KeyboardButton(text="üè∑ –¢–∏–ø")],
            [KeyboardButton(text="üí∞ –¶–µ–Ω–∞"), KeyboardButton(text="üçΩ –ö—É—Ö–Ω—è")],
            [KeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å"), KeyboardButton(text="‚≠êÔ∏è –†–µ—Ü–µ–Ω–∑–∏—è")],
            [KeyboardButton(text="üìÆ –ê–¥—Ä–µ—Å"), KeyboardButton(text="üïê –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã")],
            [KeyboardButton(text="üìù –û–ø–∏—Å–∞–Ω–∏–µ"), KeyboardButton(text="üì± –°–æ—Ü—Å–µ—Ç—å")],
            [KeyboardButton(text="üó∫ –õ–æ–∫–∞—Ü–∏—è")],
            [KeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ")]
        ],
        resize_keyboard=True
    )

@router.callback_query(F.data.startswith("edit_"))
async def edit_place_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞"""
    place_id = int(callback.data.split("_")[1])
    place = await db.get_place(place_id, callback.from_user.id)
    
    if not place:
        await callback.answer("–ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ –º–µ—Å—Ç–∞
    await state.update_data(editing_place_id=place_id, editing_place_name=place['name'])
    await state.set_state(EditPlaceStates.selecting_field)
    
    await callback.message.answer(
        f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞: <b>{place['name']}</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        parse_mode=ParseMode.HTML,
        reply_markup=get_edit_place_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data.regexp(r"^delete_\d+$"))
async def delete_place_confirm(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Å—Ç–∞"""
    place_id = int(callback.data.split("_")[1])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{place_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")
        ]
    ])
    
    await callback.message.edit_text(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –º–µ—Å—Ç–æ?",
        reply_markup=keyboard
    )

@router.callback_query(F.data.startswith("confirm_delete_"))
async def delete_place(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Å—Ç–∞"""
    place_id = int(callback.data.split("_")[2])
    await db.delete_place(place_id, callback.from_user.id)
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ Google Sheets (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è)
    asyncio.create_task(asyncio.to_thread(
        google_sheets.delete_place,
        place_id
    ))
    
    # –û—á–∏—â–∞–µ–º –∫—ç—à
    cache.clear(pattern=f"_{callback.from_user.id}")
    
    await callback.message.edit_text("üóë –ú–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–æ")
    await callback.answer("–£–¥–∞–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")

@router.callback_query(F.data == "cancel_delete")
async def cancel_delete(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è"""
    await callback.message.delete()
    await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")

# ===== –ü–û–ò–°–ö =====

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
class SearchStates(StatesGroup):
    waiting_for_query = State()

@router.message(F.text == "üîç –ü–æ–∏—Å–∫")
async def search_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞"""
    await state.set_state(SearchStates.waiting_for_query)
    await message.answer(
        "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=get_cancel_keyboard()
    )

@router.message(SearchStates.waiting_for_query)
async def search_places(message: Message, state: FSMContext):
    """–ü–æ–∏—Å–∫ –º–µ—Å—Ç"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_menu())
        return
    
    query = message.text
    places = await db.search_places(message.from_user.id, query)
    
    await state.clear()
    
    if not places:
        await message.answer(
            f"üòî –ú–µ—Å—Ç–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '<i>{query}</i>' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            parse_mode=ParseMode.HTML,
            reply_markup=get_main_menu()
        )
        return
    
    await message.answer(
        f"üîç –ù–∞–π–¥–µ–Ω–æ –º–µ—Å—Ç: <b>{len(places)}</b>",
        parse_mode=ParseMode.HTML
    )
    
    for place in places:
        buttons = []
        
        # –ö–Ω–æ–ø–∫–∞ "–ü–æ—Å–µ—Ç–∏–ª" - —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç
        if place.get('status') == 'planned':
            buttons.append([InlineKeyboardButton(text="‚úÖ –ü–æ—Å–µ—Ç–∏–ª", callback_data=f"mark_visited_{place['id']}")])
        
        # –ö–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ" - –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–ª–∏ –∞–¥—Ä–µ—Å
        if place.get('latitude') and place.get('longitude'):
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã - –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ
            yandex_maps_url = f"https://yandex.ru/maps/?pt={place['longitude']},{place['latitude']}&z=16&l=map"
            buttons.append([InlineKeyboardButton(text="üó∫ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã", url=yandex_maps_url)])
        elif place.get('address'):
            # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –∞–¥—Ä–µ—Å - –ø–æ–∏—Å–∫ –ø–æ –∞–¥—Ä–µ—Å—É
            address_encoded = urllib.parse.quote(place['address'])
            yandex_maps_url = f"https://yandex.ru/maps/?text={address_encoded}"
            buttons.append([InlineKeyboardButton(text="üó∫ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã (–ø–æ–∏—Å–∫)", url=yandex_maps_url)])
        
        buttons.append([InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{place['id']}")])
        buttons.append([InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{place['id']}")])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        text = f"üìç <b>{place['name']}</b>\n"
        if place.get('place_type'):
            text += f"üè∑ {place['place_type']}"
            if place.get('price_category'):
                text += f" {place['price_category']}"
            # –î–æ–±–∞–≤–ª—è–µ–º –∫—É—Ö–Ω—é –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
            if place.get('cuisine'):
                text += f" ‚Ä¢ {place['cuisine']}"
            text += "\n"
        if place['address']:
            text += f"üìÆ {place['address']}\n"
        if place.get('working_hours'):
            text += f"üïê –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {place['working_hours']}\n"
        if place['description']:
            text += f"üìù {place['description']}"
        
        if place['latitude'] and place['longitude']:
            await message.answer_location(
                latitude=place['latitude'],
                longitude=place['longitude']
            )
        
        await message.answer(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard
        )

# ===== –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ú–ï–°–¢–ê =====

@router.message(EditPlaceStates.selecting_field)
async def edit_place_select_field(message: Message, state: FSMContext):
    """–í—ã–±–æ—Ä –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if message.text == "‚úÖ –ì–æ—Ç–æ–≤–æ":
        await state.clear()
        await message.answer("‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!", reply_markup=get_main_menu())
        return
    
    field_map = {
        "üìù –ù–∞–∑–≤–∞–Ω–∏–µ": ("name", EditPlaceStates.editing_name, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞:"),
        "üè∑ –¢–∏–ø": ("place_type", EditPlaceStates.editing_type, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø –º–µ—Å—Ç–∞:"),
        "üí∞ –¶–µ–Ω–∞": ("price_category", EditPlaceStates.editing_price, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"),
        "üçΩ –ö—É—Ö–Ω—è": ("cuisine", EditPlaceStates.editing_cuisine, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø –∫—É—Ö–Ω–∏:"),
        "üìä –°—Ç–∞—Ç—É—Å": ("status", EditPlaceStates.editing_status, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:"),
        "‚≠êÔ∏è –†–µ—Ü–µ–Ω–∑–∏—è": ("review", EditPlaceStates.editing_review, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ä–µ—Ü–µ–Ω–∑–∏—é:"),
        "üìÆ –ê–¥—Ä–µ—Å": ("address", EditPlaceStates.editing_address, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å:"),
        "üïê –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã": ("working_hours", EditPlaceStates.editing_working_hours, "–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00 - 22:00):"),
        "üìù –û–ø–∏—Å–∞–Ω–∏–µ": ("description", EditPlaceStates.editing_description, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:"),
        "üì± –°–æ—Ü—Å–µ—Ç—å": ("social_link", EditPlaceStates.editing_social, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É (–∏–ª–∏ @ username):"),
        "üó∫ –õ–æ–∫–∞—Ü–∏—è": ("location", EditPlaceStates.editing_location, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:")
    }
    
    if message.text not in field_map:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    
    field, new_state, prompt = field_map[message.text]
    await state.update_data(editing_field=field)
    await state.set_state(new_state)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    if field == "place_type":
        keyboard = get_place_type_keyboard()
    elif field == "price_category":
        keyboard = get_price_category_keyboard()
    elif field == "cuisine":
        keyboard = get_cuisine_keyboard()
    elif field == "status":
        keyboard = get_status_keyboard()
    else:
        keyboard = get_cancel_keyboard()
    
    await message.answer(prompt, reply_markup=keyboard)

@router.message(EditPlaceStates.editing_name)
async def edit_place_name(message: Message, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—Ç–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.set_state(EditPlaceStates.selecting_field)
        data = await state.get_data()
        place_name = data.get('editing_place_name', '–º–µ—Å—Ç–æ')
        await message.answer(
            f"–û—Ç–º–µ–Ω–µ–Ω–æ.\n\n‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞: <b>{place_name}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
            parse_mode=ParseMode.HTML,
            reply_markup=get_edit_place_keyboard()
        )
        return
    
    data = await state.get_data()
    place_id = data.get('editing_place_id')
    await db.update_place(place_id, message.from_user.id, name=message.text)
    cache.clear(pattern=f"_{message.from_user.id}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ state
    await state.update_data(editing_place_name=message.text)
    await state.set_state(EditPlaceStates.selecting_field)
    
    await message.answer(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: <b>{message.text}</b>\n\n"
        f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞: <b>{message.text}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –µ—â—ë —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        parse_mode=ParseMode.HTML,
        reply_markup=get_edit_place_keyboard()
    )

@router.message(EditPlaceStates.editing_type)
async def edit_place_type(message: Message, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –º–µ—Å—Ç–∞"""
    data = await state.get_data()
    place_name = data.get('editing_place_name', '–º–µ—Å—Ç–æ')
    
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.set_state(EditPlaceStates.selecting_field)
        await message.answer(
            f"–û—Ç–º–µ–Ω–µ–Ω–æ.\n\n‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞: <b>{place_name}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
            parse_mode=ParseMode.HTML,
            reply_markup=get_edit_place_keyboard()
        )
        return
    
    place_id = data.get('editing_place_id')
    await db.update_place(place_id, message.from_user.id, place_type=message.text)
    cache.clear(pattern=f"_{message.from_user.id}")
    await state.set_state(EditPlaceStates.selecting_field)
    
    await message.answer(
        f"‚úÖ –¢–∏–ø –º–µ—Å—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {message.text}\n\n"
        f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞: <b>{place_name}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –µ—â—ë —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        parse_mode=ParseMode.HTML,
        reply_markup=get_edit_place_keyboard()
    )

@router.message(EditPlaceStates.editing_cuisine)
async def edit_place_cuisine(message: Message, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ö–Ω–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"""
    data = await state.get_data()
    place_name = data.get('editing_place_name', '–º–µ—Å—Ç–æ')
    
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.set_state(EditPlaceStates.selecting_field)
        await message.answer(
            f"–û—Ç–º–µ–Ω–µ–Ω–æ.\n\n‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞: <b>{place_name}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
            parse_mode=ParseMode.HTML,
            reply_markup=get_edit_place_keyboard()
        )
        return
    
    place_id = data.get('editing_place_id')
    cuisine = CUISINE_TYPES.get(message.text, message.text)
    await db.update_place(place_id, message.from_user.id, cuisine=cuisine)
    cache.clear(pattern=f"_{message.from_user.id}")
    await state.set_state(EditPlaceStates.selecting_field)
    
    await message.answer(
        f"‚úÖ –ö—É—Ö–Ω—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: {cuisine}\n\n"
        f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞: <b>{place_name}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –µ—â—ë —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        parse_mode=ParseMode.HTML,
        reply_markup=get_edit_place_keyboard()
    )

@router.message(EditPlaceStates.editing_price)
async def edit_place_price(message: Message, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    data = await state.get_data()
    place_name = data.get('editing_place_name', '–º–µ—Å—Ç–æ')
    
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.set_state(EditPlaceStates.selecting_field)
        await message.answer(
            f"–û—Ç–º–µ–Ω–µ–Ω–æ.\n\n‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞: <b>{place_name}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
            parse_mode=ParseMode.HTML,
            reply_markup=get_edit_place_keyboard()
        )
        return
    
    place_id = data.get('editing_place_id')
    await db.update_place(place_id, message.from_user.id, price_category=message.text)
    cache.clear(pattern=f"_{message.from_user.id}")
    await state.set_state(EditPlaceStates.selecting_field)
    
    await message.answer(
        f"‚úÖ –¶–µ–Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: {message.text}\n\n"
        f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞: <b>{place_name}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –µ—â—ë —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        parse_mode=ParseMode.HTML,
        reply_markup=get_edit_place_keyboard()
    )

@router.message(EditPlaceStates.editing_status)
async def edit_place_status(message: Message, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–µ—Å—Ç–∞"""
    data = await state.get_data()
    place_name = data.get('editing_place_name', '–º–µ—Å—Ç–æ')
    
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.set_state(EditPlaceStates.selecting_field)
        await message.answer(
            f"–û—Ç–º–µ–Ω–µ–Ω–æ.\n\n‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞: <b>{place_name}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
            parse_mode=ParseMode.HTML,
            reply_markup=get_edit_place_keyboard()
        )
        return
    
    place_id = data.get('editing_place_id')
    status = 'visited' if message.text == "‚úÖ –ü–æ—Å–µ—â–µ–Ω–æ" else 'planned'
    await db.update_place(place_id, message.from_user.id, status=status)
    cache.clear(pattern=f"_{message.from_user.id}")
    await state.set_state(EditPlaceStates.selecting_field)
    
    await message.answer(
        f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {message.text}\n\n"
        f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞: <b>{place_name}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –µ—â—ë —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        parse_mode=ParseMode.HTML,
        reply_markup=get_edit_place_keyboard()
    )

@router.message(EditPlaceStates.editing_review)
async def edit_place_review(message: Message, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–Ω–∑–∏–∏"""
    data = await state.get_data()
    place_name = data.get('editing_place_name', '–º–µ—Å—Ç–æ')
    
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.set_state(EditPlaceStates.selecting_field)
        await message.answer(
            f"–û—Ç–º–µ–Ω–µ–Ω–æ.\n\n‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞: <b>{place_name}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
            parse_mode=ParseMode.HTML,
            reply_markup=get_edit_place_keyboard()
        )
        return
    
    place_id = data.get('editing_place_id')
    await db.update_place(place_id, message.from_user.id, review=message.text)
    cache.clear(pattern=f"_{message.from_user.id}")
    await state.set_state(EditPlaceStates.selecting_field)
    
    await message.answer(
        f"‚úÖ –†–µ—Ü–µ–Ω–∑–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞\n\n"
        f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞: <b>{place_name}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –µ—â—ë —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        parse_mode=ParseMode.HTML,
        reply_markup=get_edit_place_keyboard()
    )

@router.message(EditPlaceStates.editing_address)
async def edit_place_address(message: Message, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞"""
    data = await state.get_data()
    place_name = data.get('editing_place_name', '–º–µ—Å—Ç–æ')
    
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.set_state(EditPlaceStates.selecting_field)
        await message.answer(
            f"–û—Ç–º–µ–Ω–µ–Ω–æ.\n\n‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞: <b>{place_name}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
            parse_mode=ParseMode.HTML,
            reply_markup=get_edit_place_keyboard()
        )
        return
    
    place_id = data.get('editing_place_id')
    await db.update_place(place_id, message.from_user.id, address=message.text)
    cache.clear(pattern=f"_{message.from_user.id}")
    await state.set_state(EditPlaceStates.selecting_field)
    
    await message.answer(
        f"‚úÖ –ê–¥—Ä–µ—Å –æ–±–Ω–æ–≤–ª–µ–Ω\n\n"
        f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞: <b>{place_name}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –µ—â—ë —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        parse_mode=ParseMode.HTML,
        reply_markup=get_edit_place_keyboard()
    )

@router.message(EditPlaceStates.editing_working_hours)
async def edit_place_working_hours(message: Message, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã"""
    data = await state.get_data()
    place_name = data.get('editing_place_name', '–º–µ—Å—Ç–æ')
    
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.set_state(EditPlaceStates.selecting_field)
        await message.answer(
            f"–û—Ç–º–µ–Ω–µ–Ω–æ.\n\n‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞: <b>{place_name}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
            parse_mode=ParseMode.HTML,
            reply_markup=get_edit_place_keyboard()
        )
        return
    
    place_id = data.get('editing_place_id')
    await db.update_place(place_id, message.from_user.id, working_hours=message.text)
    cache.clear(pattern=f"_{message.from_user.id}")
    await state.set_state(EditPlaceStates.selecting_field)
    
    await message.answer(
        f"‚úÖ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω\n\n"
        f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞: <b>{place_name}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –µ—â—ë —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        parse_mode=ParseMode.HTML,
        reply_markup=get_edit_place_keyboard()
    )

@router.message(EditPlaceStates.editing_description)
async def edit_place_description(message: Message, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è"""
    data = await state.get_data()
    place_name = data.get('editing_place_name', '–º–µ—Å—Ç–æ')
    
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.set_state(EditPlaceStates.selecting_field)
        await message.answer(
            f"–û—Ç–º–µ–Ω–µ–Ω–æ.\n\n‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞: <b>{place_name}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
            parse_mode=ParseMode.HTML,
            reply_markup=get_edit_place_keyboard()
        )
        return
    
    place_id = data.get('editing_place_id')
    await db.update_place(place_id, message.from_user.id, description=message.text)
    cache.clear(pattern=f"_{message.from_user.id}")
    await state.set_state(EditPlaceStates.selecting_field)
    
    await message.answer(
        f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ\n\n"
        f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞: <b>{place_name}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –µ—â—ë —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        parse_mode=ParseMode.HTML,
        reply_markup=get_edit_place_keyboard()
    )

@router.message(EditPlaceStates.editing_social)
async def edit_place_social(message: Message, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ü—Å–µ—Ç–∏"""
    data = await state.get_data()
    place_name = data.get('editing_place_name', '–º–µ—Å—Ç–æ')
    
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.set_state(EditPlaceStates.selecting_field)
        await message.answer(
            f"–û—Ç–º–µ–Ω–µ–Ω–æ.\n\n‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞: <b>{place_name}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
            parse_mode=ParseMode.HTML,
            reply_markup=get_edit_place_keyboard()
        )
        return
    
    place_id = data.get('editing_place_id')
    await db.update_place(place_id, message.from_user.id, social_link=message.text)
    cache.clear(pattern=f"_{message.from_user.id}")
    await state.set_state(EditPlaceStates.selecting_field)
    
    await message.answer(
        f"‚úÖ –°–æ—Ü—Å–µ—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞\n\n"
        f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞: <b>{place_name}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –µ—â—ë —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        parse_mode=ParseMode.HTML,
        reply_markup=get_edit_place_keyboard()
    )

@router.message(EditPlaceStates.editing_location)
async def edit_place_location(message: Message, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏"""
    data = await state.get_data()
    place_name = data.get('editing_place_name', '–º–µ—Å—Ç–æ')
    
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.set_state(EditPlaceStates.selecting_field)
        await message.answer(
            f"–û—Ç–º–µ–Ω–µ–Ω–æ.\n\n‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞: <b>{place_name}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
            parse_mode=ParseMode.HTML,
            reply_markup=get_edit_place_keyboard()
        )
        return
    
    latitude = None
    longitude = None
    
    if message.location:
        # –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –∏–∑ Telegram
        latitude = message.location.latitude
        longitude = message.location.longitude
    elif message.text:
        # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ –ø—Ä–æ–±–µ–ª—É
            coords = message.text.replace(',', ' ').split()
            if len(coords) == 2:
                latitude = float(coords[0].strip())
                longitude = float(coords[1].strip())
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                if not (-90 <= latitude <= 90 and -180 <= longitude <= 180):
                    raise ValueError("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
            else:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        except (ValueError, IndexError):
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç!\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ Telegram –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "55.7558, 37.6173\n"
                "–∏–ª–∏\n"
                "55.7558 37.6173"
            )
            return
    
    if latitude and longitude:
        place_id = data.get('editing_place_id')
        await db.update_place(
            place_id, message.from_user.id,
            latitude=latitude,
            longitude=longitude
        )
        cache.clear(pattern=f"_{message.from_user.id}")
        await state.set_state(EditPlaceStates.selecting_field)
        
        await message.answer(
            f"‚úÖ –õ–æ–∫–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ ({latitude}, {longitude})\n\n"
            f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞: <b>{place_name}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –µ—â—ë —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
            parse_mode=ParseMode.HTML,
            reply_markup=get_edit_place_keyboard()
        )
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "55.7558, 37.6173"
        )

# ===== –°–¢–ê–¢–ò–°–¢–ò–ö–ê =====

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    cache_key = f"stats_{message.from_user.id}"
    
    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
    cached_count = cache.get(cache_key)
    if cached_count is not None:
        count = cached_count
    else:
        count = await db.count_user_places(message.from_user.id)
        cache.set(cache_key, count)
    
    await message.answer(
        f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
        f"üìç –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –º–µ—Å—Ç: <b>{count}</b>\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name}",
        parse_mode=ParseMode.HTML
    )

# ===== –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø =====

@router.message(F.text == "üéâ –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
async def add_event(message: Message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    await message.answer(
        "üéâ <b>–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!</b>\n\n"
        "–°–∫–æ—Ä–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º.",
        parse_mode=ParseMode.HTML,
        reply_markup=get_places_submenu()
    )

# ===== –ò–ó–£–ß–ï–ù–ò–ï =====

@router.message(F.text == "üé¨ –§–∏–ª—å–º—ã")
async def show_movies(message: Message):
    """–†–∞–∑–¥–µ–ª —Ñ–∏–ª—å–º–æ–≤"""
    await message.answer(
        "üé¨ <b>–§–∏–ª—å–º—ã</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Ñ–∏–ª—å–º—ã –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É\n"
        "‚Ä¢ –û—Ç–º–µ—á–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ\n"
        "‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –∑–∞–º–µ—Ç–∫–∏ –∏ –æ—Ü–µ–Ω–∫–∏\n\n"
        "<i>–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...</i>",
        parse_mode=ParseMode.HTML,
        reply_markup=get_learning_submenu()
    )

@router.message(F.text == "üìñ –ö–Ω–∏–≥–∏")
async def show_books(message: Message):
    """–†–∞–∑–¥–µ–ª –∫–Ω–∏–≥"""
    await message.answer(
        "üìñ <b>–ö–Ω–∏–≥–∏</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –í–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –¥–ª—è —á—Ç–µ–Ω–∏—è\n"
        "‚Ä¢ –û—Ç–º–µ—á–∞—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ\n"
        "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Ü–∏—Ç–∞—Ç—ã –∏ –º—ã—Å–ª–∏\n\n"
        "<i>–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...</i>",
        parse_mode=ParseMode.HTML,
        reply_markup=get_learning_submenu()
    )

@router.message(F.text == "üí° –ù–æ–≤—ã–µ —Ç–µ–º—ã")
async def show_topics(message: Message):
    """–†–∞–∑–¥–µ–ª –Ω–æ–≤—ã—Ö —Ç–µ–º"""
    await message.answer(
        "üí° <b>–ù–æ–≤—ã–µ —Ç–µ–º—ã</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ç–µ–º—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è\n"
        "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è\n"
        "‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –∑–∞–º–µ—Ç–∫–∏ –∏ —Ä–µ—Å—É—Ä—Å—ã\n\n"
        "<i>–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...</i>",
        parse_mode=ParseMode.HTML,
        reply_markup=get_learning_submenu()
    )

# ===== –ü–£–¢–ï–®–ï–°–¢–í–ò–ï =====

@router.message(F.text == "üó∫ –ü–ª–∞–Ω—ã –ø–æ–µ–∑–¥–æ–∫")
async def show_travel_plans(message: Message):
    """–ü–ª–∞–Ω—ã –ø–æ–µ–∑–¥–æ–∫"""
    await message.answer(
        "üó∫ <b>–ü–ª–∞–Ω—ã –ø–æ–µ–∑–¥–æ–∫</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –ø–ª–∞–Ω—ã –±—É–¥—É—â–∏—Ö –ø–æ–µ–∑–¥–æ–∫\n"
        "‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –º–µ—Å—Ç–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å\n"
        "‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã\n\n"
        "<i>–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...</i>",
        parse_mode=ParseMode.HTML,
        reply_markup=get_travel_submenu()
    )

@router.message(F.text == "‚úàÔ∏è –ü–æ—Å–µ—â–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã")
async def show_visited_countries(message: Message):
    """–ü–æ—Å–µ—â–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã"""
    await message.answer(
        "‚úàÔ∏è <b>–ü–æ—Å–µ—â–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –û—Ç–º–µ—á–∞—Ç—å —Å—Ç—Ä–∞–Ω—ã –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Å–µ—Ç–∏–ª–∏\n"
        "‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ –∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "‚Ä¢ –í–∏–¥–µ—Ç—å –∫–∞—Ä—Ç—É —Å–≤–æ–∏—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π\n\n"
        "<i>–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...</i>",
        parse_mode=ParseMode.HTML,
        reply_markup=get_travel_submenu()
    )

@router.message(F.text == "üìù –°–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π")
async def show_travel_wishlist(message: Message):
    """–°–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π"""
    await message.answer(
        "üìù <b>–°–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å –º–µ—Å—Ç–∞ –º–µ—á—Ç—ã\n"
        "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –±—é–¥–∂–µ—Ç –ø–æ–µ–∑–¥–æ–∫\n\n"
        "<i>–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...</i>",
        parse_mode=ParseMode.HTML,
        reply_markup=get_travel_submenu()
    )

# ===== –§–ò–ù–ê–ù–°–´ =====

@router.message(F.text == "üí∏ –†–∞—Å—Ö–æ–¥—ã")
async def show_expenses_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–∞—Å—Ö–æ–¥–æ–≤"""
    await message.answer(
        "üí∏ <b>–†–∞—Å—Ö–æ–¥—ã</b>\n\n–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ —Ç—Ä–∞—Ç–∞–º–∏:",
        reply_markup=get_expenses_submenu(),
        parse_mode=ParseMode.HTML
    )

# ===== –¢–†–ê–¢–´ =====

@router.message(F.text == "‚ûï –ù–æ–≤–∞—è —Ç—Ä–∞—Ç–∞")
async def add_expense_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞—Ç—ã"""
    user_expense_data[message.from_user.id] = {}
    await state.set_state(AddExpenseStates.waiting_for_category)
    await message.answer(
        "üè∑ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç—Ä–∞—Ç—ã:",
        reply_markup=get_expense_category_keyboard()
    )

@router.message(AddExpenseStates.waiting_for_category)
async def process_expense_category(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç—ã"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        del user_expense_data[message.from_user.id]
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_finance_submenu())
        return
    
    user_expense_data[message.from_user.id]['category'] = message.text
    await state.set_state(AddExpenseStates.waiting_for_name)
    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ç—ã:",
        reply_markup=get_cancel_keyboard()
    )

@router.message(AddExpenseStates.waiting_for_name)
async def process_expense_name(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–∞—Ç—ã"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        del user_expense_data[message.from_user.id]
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_finance_submenu())
        return
    
    user_expense_data[message.from_user.id]['name'] = message.text.capitalize()
    await state.set_state(AddExpenseStates.waiting_for_amount)
    await message.answer(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:",
        reply_markup=get_cancel_keyboard()
    )

@router.message(AddExpenseStates.waiting_for_amount)
async def process_expense_amount(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º—ã —Ç—Ä–∞—Ç—ã"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        del user_expense_data[message.from_user.id]
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_finance_submenu())
        return
    
    try:
        amount = float(message.text.replace(',', '.'))
        if amount < 0:
            await message.answer("‚ùå –°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
            return
        user_expense_data[message.from_user.id]['amount'] = amount
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return
    
    await state.set_state(AddExpenseStates.waiting_for_date_choice)
    await message.answer(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Ç—Ä–∞—Ç—ã:",
        reply_markup=get_date_choice_keyboard()
    )

@router.message(AddExpenseStates.waiting_for_date_choice)
async def process_expense_date_choice(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        del user_expense_data[message.from_user.id]
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_finance_submenu())
        return
    
    if message.text == "üìÖ –°–µ–≥–æ–¥–Ω—è":
        user_expense_data[message.from_user.id]['expense_date'] = datetime.now().strftime('%d.%m.%Y')
        await state.set_state(AddExpenseStates.waiting_for_note_choice)
        await message.answer(
            "üìù –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É?",
            reply_markup=get_note_keyboard()
        )
    elif message.text == "üìÜ –í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É":
        await state.set_state(AddExpenseStates.waiting_for_date)
        await message.answer(
            "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É:\n\n"
            "–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 06.10.2025)\n"
            "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –î–î.–ú–ú (–≥–æ–¥ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)",
            reply_markup=get_cancel_keyboard()
        )
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏:")

@router.message(AddExpenseStates.waiting_for_date)
async def process_expense_date(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –≤—Ä—É—á–Ω—É—é"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        del user_expense_data[message.from_user.id]
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_finance_submenu())
        return
    
    try:
        date_parts = message.text.strip().split('.')
        if len(date_parts) == 2:
            day, month = date_parts
            year = datetime.now().year
        elif len(date_parts) == 3:
            day, month, year = date_parts
        else:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        
        expense_date = datetime(int(year), int(month), int(day))
        user_expense_data[message.from_user.id]['expense_date'] = expense_date.strftime('%d.%m.%Y')
        
    except (ValueError, IndexError):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 06.10.2025 –∏–ª–∏ 06.10"
        )
        return
    
    await state.set_state(AddExpenseStates.waiting_for_note_choice)
    await message.answer(
        "üìù –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É?",
        reply_markup=get_note_keyboard()
    )

@router.message(AddExpenseStates.waiting_for_note_choice)
async def process_expense_note_choice(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–º–µ—Ç–∫–∏"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        del user_expense_data[message.from_user.id]
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_finance_submenu())
        return
    
    if message.text == "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        user_expense_data[message.from_user.id]['note'] = None
        await save_expense(message, state)
    elif message.text == "‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É":
        await state.set_state(AddExpenseStates.waiting_for_note)
        await message.answer(
            "üìù –í–≤–µ–¥–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É:",
            reply_markup=get_cancel_keyboard()
        )
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏:")

@router.message(AddExpenseStates.waiting_for_note)
async def process_expense_note(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        del user_expense_data[message.from_user.id]
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_finance_submenu())
        return
    
    user_expense_data[message.from_user.id]['note'] = message.text
    await save_expense(message, state)

async def save_expense(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∞—Ç—ã"""
    category = user_expense_data[message.from_user.id]['category']
    name = user_expense_data[message.from_user.id]['name']
    amount = user_expense_data[message.from_user.id]['amount']
    expense_date = user_expense_data[message.from_user.id]['expense_date']
    note = user_expense_data[message.from_user.id].get('note')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    expense_id = await db.add_expense(
        user_id=message.from_user.id,
        category=category,
        name=name,
        amount=amount,
        expense_date=expense_date,
        note=note
    )
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets
    if google_sheets.enabled:
        await asyncio.to_thread(
            google_sheets.add_expense,
            message.from_user.id,
            message.from_user.full_name,
            {
                'id': expense_id,
                'category': category,
                'name': name,
                'amount': amount,
                'expense_date': expense_date,
                'note': note or ''
            }
        )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    result_message = f"‚úÖ –¢—Ä–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
    result_message += f"{category} {name}\n"
    result_message += f"üí∞ {amount:,.0f} ‚ÇΩ\n"
    result_message += f"üìÖ {expense_date}"
    if note:
        result_message += f"\nüìù {note}"
    
    await state.clear()
    del user_expense_data[message.from_user.id]
    await message.answer(result_message, reply_markup=get_expenses_submenu())

# ===== –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –†–ê–°–•–û–î–´ =====

@router.message(F.text == "üìã –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã")
async def show_recurring_expenses_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤"""
    await message.answer(
        "üìã <b>–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã</b>\n\n–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º–∏ –ø–ª–∞—Ç–µ–∂–∞–º–∏:",
        reply_markup=get_recurring_expenses_submenu(),
        parse_mode=ParseMode.HTML
    )

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å")
async def add_recurring_expense_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞"""
    user_recurring_expense_data[message.from_user.id] = {}
    await state.set_state(AddRecurringExpenseStates.waiting_for_name)
    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞\n(–Ω–∞–ø—Ä–∏–º–µ—Ä: –ü–æ–¥–ø–∏—Å–∫–∞ Spotify, –ö—Ä–µ–¥–∏—Ç):",
        reply_markup=get_cancel_keyboard()
    )

@router.message(AddRecurringExpenseStates.waiting_for_name)
async def process_recurring_expense_name(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        del user_recurring_expense_data[message.from_user.id]
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_finance_submenu())
        return
    
    user_recurring_expense_data[message.from_user.id]['name'] = message.text.capitalize()
    await state.set_state(AddRecurringExpenseStates.waiting_for_amount)
    await message.answer(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞:",
        reply_markup=get_cancel_keyboard()
    )

@router.message(AddRecurringExpenseStates.waiting_for_amount)
async def process_recurring_expense_amount(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        del user_recurring_expense_data[message.from_user.id]
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_finance_submenu())
        return
    
    try:
        amount = float(message.text.replace(',', '.'))
        if amount < 0:
            await message.answer("‚ùå –°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
            return
        user_recurring_expense_data[message.from_user.id]['amount'] = amount
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return
    
    await state.set_state(AddRecurringExpenseStates.waiting_for_date)
    await message.answer(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–ø–ª–∞—Ç—ã:\n\n"
        "–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 05.10.2025)\n"
        "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –î–î.–ú–ú (–≥–æ–¥ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)",
        reply_markup=get_cancel_keyboard()
    )

@router.message(AddRecurringExpenseStates.waiting_for_date)
async def process_recurring_expense_date(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        del user_recurring_expense_data[message.from_user.id]
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_finance_submenu())
        return
    
    try:
        date_parts = message.text.strip().split('.')
        if len(date_parts) == 2:
            day, month = date_parts
            year = datetime.now().year
        elif len(date_parts) == 3:
            day, month, year = date_parts
        else:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        
        payment_date = datetime(int(year), int(month), int(day))
        user_recurring_expense_data[message.from_user.id]['payment_date'] = payment_date.strftime('%d.%m.%Y')
        
    except (ValueError, IndexError):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 05.10.2025 –∏–ª–∏ 05.10"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    name = user_recurring_expense_data[message.from_user.id]['name']
    amount = user_recurring_expense_data[message.from_user.id]['amount']
    
    recurring_id = await db.add_recurring_expense(
        user_id=message.from_user.id,
        name=name,
        amount=amount,
        payment_date=user_recurring_expense_data[message.from_user.id]['payment_date']
    )
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets
    if google_sheets.enabled:
        await asyncio.to_thread(
            google_sheets.add_recurring_expense,
            message.from_user.id,
            message.from_user.full_name,
            {
                'id': recurring_id,
                'name': name,
                'amount': amount,
                'payment_date': user_recurring_expense_data[message.from_user.id]['payment_date']
            }
        )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    result_message = (
        f"‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
        f"üìù {name}\n"
        f"üí∞ {amount:,.0f} ‚ÇΩ\n"
        f"üìÖ {payment_date.strftime('%d.%m')}"
    )
    
    await state.clear()
    del user_recurring_expense_data[message.from_user.id]
    await message.answer(result_message, reply_markup=get_recurring_expenses_submenu())

@router.message(F.text == "üìã –ú–æ–∏ –ø–ª–∞—Ç–µ–∂–∏")
async def show_recurring_expenses_list(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤"""
    user_id = message.from_user.id
    
    expenses = await db.get_user_recurring_expenses(user_id)
    
    if not expenses:
        await message.answer(
            "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤.\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —á–µ—Ä–µ–∑ ¬´‚ûï –î–æ–±–∞–≤–∏—Ç—å¬ª",
            reply_markup=get_recurring_expenses_submenu()
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
    text = "üìã <b>–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã:</b>\n\n"
    total = 0
    for expense in expenses:
        text += f"<b>{expense['payment_date']}</b> ‚Äî {expense['name']} ‚Äî {expense['amount']:,.0f} ‚ÇΩ\n"
        total += expense['amount']
    
    text += f"\nüí∞ <b>–ò—Ç–æ–≥–æ:</b> {total:,.0f} ‚ÇΩ/–º–µ—Å—è—Ü"
    
    await message.answer(text, reply_markup=get_recurring_expenses_submenu(), parse_mode=ParseMode.HTML)

@router.message(F.text == "üìã –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞—Ç")
async def show_expenses_history(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞—Ç"""
    user_id = message.from_user.id
    
    expenses = await db.get_user_expenses(user_id, limit=15)
    
    if not expenses:
        await message.answer(
            "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞—Ç.\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —á–µ—Ä–µ–∑ ¬´‚ûï –ù–æ–≤–∞—è —Ç—Ä–∞—Ç–∞¬ª",
            reply_markup=get_expenses_submenu()
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
    text = "üìã <b>–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞—Ç:</b>\n\n"
    for expense in expenses:
        category_emoji = expense['category'].split()[0]  # –ë–µ—Ä—ë–º —ç–º–æ–¥–∑–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        text += f"<b>{expense['expense_date']}</b> ‚Äî {category_emoji} {expense['name']} ‚Äî {expense['amount']:,.0f} ‚ÇΩ\n"
    
    await message.answer(text, reply_markup=get_expenses_submenu(), parse_mode=ParseMode.HTML)

@router.message(F.text == "üõí –ê–≤–∏—Ç–æ")
async def show_avito_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ê–≤–∏—Ç–æ"""
    await message.answer(
        "üõí <b>–ê–≤–∏—Ç–æ</b>\n\n–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ –ø—Ä–æ–¥–∞–∂–∞–º–∏:",
        reply_markup=get_avito_submenu(),
        parse_mode=ParseMode.HTML
    )

@router.message(F.text == "‚ûï –ù–æ–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞")
async def add_avito_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏"""
    user_avito_data[message.from_user.id] = {}
    await state.set_state(AddAvitoStates.waiting_for_item_name)
    await message.answer(
        "üì¶ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–µ—â–∏ –∫–æ—Ç–æ—Ä—É—é –ø—Ä–æ–¥–∞–ª–∏:",
        reply_markup=get_cancel_keyboard()
    )

@router.message(AddAvitoStates.waiting_for_item_name)
async def process_avito_item_name(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–µ—â–∏"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        del user_avito_data[message.from_user.id]
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_finance_submenu())
        return
    
    # –ù–∞–∑–≤–∞–Ω–∏–µ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã
    user_avito_data[message.from_user.id]['item_name'] = message.text.capitalize()
    await state.set_state(AddAvitoStates.waiting_for_amount)
    await message.answer(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø—Ä–æ–¥–∞–∂–∏:",
        reply_markup=get_cancel_keyboard()
    )

@router.message(AddAvitoStates.waiting_for_amount)
async def process_avito_amount(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º—ã –ø—Ä–æ–¥–∞–∂–∏"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        del user_avito_data[message.from_user.id]
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_finance_submenu())
        return
    
    try:
        amount = float(message.text.replace(',', '.'))
        if amount < 0:
            await message.answer("‚ùå –°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
            return
        user_avito_data[message.from_user.id]['amount'] = amount
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return
    
    await state.set_state(AddAvitoStates.waiting_for_date)
    await message.answer(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–æ–¥–∞–∂–∏:\n\n"
        "–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 06.10.2025)\n"
        "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –î–î.–ú–ú (–≥–æ–¥ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)",
        reply_markup=get_cancel_keyboard()
    )

@router.message(AddAvitoStates.waiting_for_date)
async def process_avito_date(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –ø—Ä–æ–¥–∞–∂–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        del user_avito_data[message.from_user.id]
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_finance_submenu())
        return
    
    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
    try:
        date_parts = message.text.strip().split('.')
        if len(date_parts) == 2:
            day, month = date_parts
            year = datetime.now().year
        elif len(date_parts) == 3:
            day, month, year = date_parts
        else:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        sale_date = datetime(int(year), int(month), int(day))
        user_avito_data[message.from_user.id]['sale_date'] = sale_date.strftime('%d.%m.%Y')
        
    except (ValueError, IndexError):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 06.10.2025 –∏–ª–∏ 06.10"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    item_name = user_avito_data[message.from_user.id]['item_name']
    amount = user_avito_data[message.from_user.id]['amount']
    
    avito_id = await db.add_avito_sale(
        user_id=message.from_user.id,
        item_name=item_name,
        amount=amount,
        sale_date=user_avito_data[message.from_user.id]['sale_date']
    )
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets
    if google_sheets.enabled:
        await asyncio.to_thread(
            google_sheets.add_avito_sale,
            message.from_user.id,
            message.from_user.full_name,
            {
                'id': avito_id,
                'item_name': item_name,
                'amount': amount,
                'sale_date': user_avito_data[message.from_user.id]['sale_date']
            }
        )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    date_short = sale_date.strftime('%d.%m')
    result_message = (
        f"‚úÖ <b>–£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–Ω–æ!</b>\n\n"
        f"üì¶ {item_name}\n"
        f"üí∞ {amount:,.0f} ‚ÇΩ\n"
        f"üìÖ {date_short}"
    )
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    distribution = calculate_avito_distribution(amount)
    result_message += f"\n\n{format_distribution(distribution)}"
    
    await state.clear()
    del user_avito_data[message.from_user.id]
    await message.answer(result_message, reply_markup=get_avito_submenu(), parse_mode=ParseMode.HTML)

@router.message(F.text == "üìã –ú–æ–∏ –ø—Ä–æ–¥–∞–∂–∏")
async def show_avito_sales(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥–∞–∂ –ê–≤–∏—Ç–æ"""
    user_id = message.from_user.id
    
    sales = await db.get_user_avito_sales(user_id)
    
    if not sales:
        await message.answer(
            "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–¥–∞–∂.\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –ø—Ä–æ–¥–∞–∂—É —á–µ—Ä–µ–∑ ¬´‚ûï –ù–æ–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞¬ª",
            reply_markup=get_avito_submenu()
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
    text = "üìã <b>–ú–æ–∏ –ø—Ä–æ–¥–∞–∂–∏:</b>\n\n"
    for sale in sales[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
        text += f"<b>{sale['sale_date']}</b> ‚Äî {sale['item_name']} ‚Äî {sale['amount']:,.0f} ‚ÇΩ\n"
    
    if len(sales) > 10:
        text += f"\n<i>... –∏ –µ—â—ë {len(sales) - 10} –ø—Ä–æ–¥–∞–∂</i>"
    
    await message.answer(text, reply_markup=get_avito_submenu(), parse_mode=ParseMode.HTML)

@router.message(F.text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ê–≤–∏—Ç–æ")
async def show_avito_statistics(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ê–≤–∏—Ç–æ"""
    user_id = message.from_user.id
    
    stats = await db.get_avito_stats(user_id)
    
    if not stats or stats['sales_count'] == 0:
        await message.answer(
            "üìà –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–¥–∞–∂.\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –ø—Ä–æ–¥–∞–∂—É —á–µ—Ä–µ–∑ ¬´‚ûï –ù–æ–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞¬ª",
            reply_markup=get_avito_submenu()
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ê–≤–∏—Ç–æ</b>\n\n"
        f"üì¶ –ü—Ä–æ–¥–∞–Ω–æ –≤–µ—â–µ–π: {stats['sales_count']}\n"
        f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {stats['total_amount']:,.0f} ‚ÇΩ\n"
        f"üìà –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {stats['avg_amount']:,.0f} ‚ÇΩ"
    )
    
    await message.answer(text, reply_markup=get_avito_submenu(), parse_mode=ParseMode.HTML)

# ===== –ú–ï–î–ò–ê: –§–ò–õ–¨–ú–´ =====

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º")
async def add_movie_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å–º–∞"""
    user_movie_data[message.from_user.id] = {}
    await state.set_state(AddMovieStates.waiting_for_title)
    await message.answer(
        "üé¨ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:",
        reply_markup=get_cancel_keyboard()
    )

@router.message(AddMovieStates.waiting_for_title)
async def process_movie_title(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        del user_movie_data[message.from_user.id]
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_movies_submenu())
        return
    
    user_movie_data[message.from_user.id]['title'] = message.text.capitalize()
    await state.set_state(AddMovieStates.waiting_for_genre)
    await message.answer(
        "üé≠ –í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä —Ñ–∏–ª—å–º–∞:",
        reply_markup=get_genre_keyboard()
    )

@router.message(AddMovieStates.waiting_for_genre)
async def process_movie_genre(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∂–∞–Ω—Ä–∞ —Ñ–∏–ª—å–º–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞" or message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        del user_movie_data[message.from_user.id]
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_movies_submenu())
        return
    
    genre = GENRE_MAP.get(message.text, message.text)
    user_movie_data[message.from_user.id]['genre'] = genre
    await state.set_state(AddMovieStates.waiting_for_year)
    await message.answer(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞:",
        reply_markup=get_cancel_keyboard()
    )

@router.message(AddMovieStates.waiting_for_year)
async def process_movie_year(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ–¥–∞ –≤—ã–ø—É—Å–∫–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        del user_movie_data[message.from_user.id]
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_movies_submenu())
        return
    
    try:
        year = int(message.text)
        if year < 1800 or year > 2100:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≥–æ–¥. –í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –æ—Ç 1800 –¥–æ 2100:")
            return
        user_movie_data[message.from_user.id]['year'] = year
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2020):")
        return
    
    await state.set_state(AddMovieStates.waiting_for_status)
    await message.answer(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å:",
        reply_markup=get_movie_status_keyboard()
    )


@router.message(AddMovieStates.waiting_for_status)
async def process_movie_status(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        del user_movie_data[message.from_user.id]
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_movies_submenu())
        return
    
    if message.text not in ["üëÅ –ù–µ —Å–º–æ—Ç—Ä–µ–ª", "‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–ª"]:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏:")
        return
    
    user_movie_data[message.from_user.id]['status'] = message.text
    await state.set_state(AddMovieStates.waiting_for_rating)
    await message.answer(
        "‚≠ê –û—Ü–µ–Ω–∏—Ç–µ —Ñ–∏–ª—å–º (1-5 –∑–≤—ë–∑–¥) –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ:",
        reply_markup=get_rating_keyboard()
    )

@router.message(AddMovieStates.waiting_for_rating)
async def process_movie_rating(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        del user_movie_data[message.from_user.id]
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_movies_submenu())
        return
    
    if message.text == "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        user_movie_data[message.from_user.id]['rating'] = None
    else:
        rating_map = {"‚≠ê": 1, "‚≠ê‚≠ê": 2, "‚≠ê‚≠ê‚≠ê": 3, "‚≠ê‚≠ê‚≠ê‚≠ê": 4, "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê": 5}
        if message.text not in rating_map:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏:")
            return
        user_movie_data[message.from_user.id]['rating'] = rating_map[message.text]
    
    await state.set_state(AddMovieStates.waiting_for_notes)
    await message.answer(
        "üìù –î–æ–±–∞–≤—å—Ç–µ –∑–∞–º–µ—Ç–∫—É –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ:",
        reply_markup=get_skip_keyboard()
    )

@router.message(AddMovieStates.waiting_for_notes)
async def process_movie_notes(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        del user_movie_data[message.from_user.id]
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_movies_submenu())
        return
    
    if message.text == "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        user_movie_data[message.from_user.id]['notes'] = None
    else:
        user_movie_data[message.from_user.id]['notes'] = message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    movie_id = await db.add_movie(
        user_id=message.from_user.id,
        title=user_movie_data[message.from_user.id]['title'],
        genre=user_movie_data[message.from_user.id]['genre'],
        year=user_movie_data[message.from_user.id]['year'],
        overview='',
        status=user_movie_data[message.from_user.id]['status'],
        rating=user_movie_data[message.from_user.id].get('rating'),
        notes=user_movie_data[message.from_user.id].get('notes')
    )
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets
    await asyncio.to_thread(
        google_sheets.add_media,
        message.from_user.id,
        message.from_user.username or message.from_user.first_name,
        {
            'id': movie_id,
            'type': '–§–∏–ª—å–º',
            'title': user_movie_data[message.from_user.id]['title'],
            'genre': user_movie_data[message.from_user.id]['genre'],
            'year': user_movie_data[message.from_user.id]['year'],
            'overview': '',
            'status': user_movie_data[message.from_user.id]['status'],
            'rating': user_movie_data[message.from_user.id].get('rating'),
            'notes': user_movie_data[message.from_user.id].get('notes', '')
        }
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    result = f"‚úÖ –§–∏–ª—å–º –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
    result += f"üé¨ {user_movie_data[message.from_user.id]['title']}\n"
    result += f"üé≠ {user_movie_data[message.from_user.id]['genre']}\n"
    result += f"üìÖ {user_movie_data[message.from_user.id]['year']}\n"
    result += f"üìä {user_movie_data[message.from_user.id]['status']}"
    
    if user_movie_data[message.from_user.id].get('rating'):
        result += f"\n‚≠ê {'‚≠ê' * user_movie_data[message.from_user.id]['rating']}"
    
    await state.clear()
    del user_movie_data[message.from_user.id]
    await message.answer(result, reply_markup=get_movies_submenu())

@router.message(F.text == "‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ")
async def show_watched_movies_menu(message: Message, state: FSMContext):
    """–ú–µ–Ω—é –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ - –≤—ã–±–æ—Ä –∂–∞–Ω—Ä–∞"""
    await state.update_data(movie_status="‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–ª")
    await state.set_state(ViewMoviesStates.waiting_for_genre)
    await message.answer(
        "‚úÖ <b>–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:",
        reply_markup=get_genre_keyboard(),
        parse_mode=ParseMode.HTML
    )

@router.message(F.text == "üëÅ –ù–µ —Å–º–æ—Ç—Ä–µ–ª")
async def show_unwatched_movies_menu(message: Message, state: FSMContext):
    """–ú–µ–Ω—é –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ - –≤—ã–±–æ—Ä –∂–∞–Ω—Ä–∞"""
    await state.update_data(movie_status="üëÅ –ù–µ —Å–º–æ—Ç—Ä–µ–ª")
    await state.set_state(ViewMoviesStates.waiting_for_genre)
    await message.answer(
        "üëÅ <b>–ù–µ —Å–º–æ—Ç—Ä–µ–ª</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:",
        reply_markup=get_genre_keyboard(),
        parse_mode=ParseMode.HTML
    )

@router.message(ViewMoviesStates.waiting_for_genre)
async def show_movies_by_genre(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å–º—ã –ø–æ –∂–∞–Ω—Ä—É –∏ —Å—Ç–∞—Ç—É—Å—É"""
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é", reply_markup=get_movies_submenu())
        return
    
    genre = GENRE_MAP.get(message.text)
    if not genre:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=get_genre_keyboard())
        return
    
    data = await state.get_data()
    status = data.get('movie_status')
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å–º—ã —Å –Ω—É–∂–Ω—ã–º –∂–∞–Ω—Ä–æ–º –∏ —Å—Ç–∞—Ç—É—Å–æ–º
    all_movies = await db.get_user_movies(user_id)
    filtered_movies = [m for m in all_movies if m['genre'] == genre and m['status'] == status]
    
    if not filtered_movies:
        await message.answer(
            f"üìã –£ –≤–∞—Å –Ω–µ—Ç —Ñ–∏–ª—å–º–æ–≤ –≤ –∂–∞–Ω—Ä–µ <b>{genre}</b> —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º <b>{status}</b>",
            reply_markup=get_movies_submenu(),
            parse_mode=ParseMode.HTML
        )
        await state.clear()
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∏–ª—å–º
    for movie in filtered_movies:
        text = format_movie_text(movie)
        
        # –ö–Ω–æ–ø–∫–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        buttons = []
        if status == "üëÅ –ù–µ —Å–º–æ—Ç—Ä–µ–ª":
            buttons.append([InlineKeyboardButton(text="‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–ª", callback_data=f"mark_watched_{movie['id']}")])
        buttons.append([InlineKeyboardButton(text=EMOJI_DELETE, callback_data=f"delete_movie_{movie['id']}")])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await message.answer(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
    
    await message.answer(
        f"üìä –í—Å–µ–≥–æ —Ñ–∏–ª—å–º–æ–≤: {len(filtered_movies)}",
        reply_markup=get_movies_submenu()
    )
    await state.clear()

@router.callback_query(F.data.startswith("mark_watched_"))
async def mark_movie_watched_callback(callback: CallbackQuery):
    """–û—Ç–º–µ—Ç–∏—Ç—å —Ñ–∏–ª—å–º –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π"""
    movie_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    success = await db.update_movie_status(movie_id, user_id, "‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–ª")
    
    if success:
        await callback.message.edit_text(
            callback.message.text + "\n\n‚úÖ <b>–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ</b>",
            parse_mode=ParseMode.HTML
        )
        await callback.answer("–§–∏–ª—å–º –ø–µ—Ä–µ–º–µ—â—ë–Ω –≤ '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ'", show_alert=False)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", show_alert=True)

@router.callback_query(F.data.startswith("delete_movie_"))
async def delete_movie_callback(callback: CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å–º"""
    movie_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    success = await db.delete_movie(movie_id, user_id)
    
    if success:
        await callback.message.edit_text("‚úÖ –§–∏–ª—å–º —É–¥–∞–ª—ë–Ω")
        await callback.answer("–£–¥–∞–ª–µ–Ω–æ", show_alert=False)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)

@router.message(F.text == "üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º")
async def random_movie_menu(message: Message, state: FSMContext):
    """–ú–µ–Ω—é —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞ - –≤—ã–±–æ—Ä –∂–∞–Ω—Ä–∞"""
    await state.set_state(ViewMoviesStates.waiting_for_random_genre)
    await message.answer(
        "üé≤ <b>–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:",
        reply_markup=get_genre_keyboard(),
        parse_mode=ParseMode.HTML
    )

@router.message(ViewMoviesStates.waiting_for_random_genre)
async def show_random_movie(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞"""
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é", reply_markup=get_movies_submenu())
        return
    
    genre = GENRE_MAP.get(message.text)
    if not genre:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=get_genre_keyboard())
        return
    
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∏–ª—å–º—ã —ç—Ç–æ–≥–æ –∂–∞–Ω—Ä–∞
    all_movies = await db.get_user_movies(user_id)
    genre_movies = [m for m in all_movies if m['genre'] == genre]
    
    if not genre_movies:
        await message.answer(
            f"üìã –£ –≤–∞—Å –Ω–µ—Ç —Ñ–∏–ª—å–º–æ–≤ –≤ –∂–∞–Ω—Ä–µ <b>{genre}</b>",
            reply_markup=get_movies_submenu(),
            parse_mode=ParseMode.HTML
        )
        await state.clear()
        return
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º
    import random
    movie = random.choice(genre_movies)
    
    text = f"üé≤ <b>–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º –∏–∑ –∂–∞–Ω—Ä–∞ {genre}</b>\n\n"
    text += format_movie_text(movie)
    
    await message.answer(text, reply_markup=get_movies_submenu(), parse_mode=ParseMode.HTML)
    await state.clear()

# ======================= –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –°–ï–†–ò–ê–õ–û–í =======================

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–∏–∞–ª")
async def add_series_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–∏–∞–ª–∞"""
    user_series_data[message.from_user.id] = {}
    await state.set_state(AddSeriesStates.waiting_for_title)
    await message.answer(
        "üì∫ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞:",
        reply_markup=get_cancel_keyboard()
    )

@router.message(AddSeriesStates.waiting_for_title)
async def process_series_title(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ—Ä–∏–∞–ª–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        del user_series_data[message.from_user.id]
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_series_submenu())
        return
    
    user_series_data[message.from_user.id]['title'] = message.text.capitalize()
    await state.set_state(AddSeriesStates.waiting_for_genre)
    await message.answer(
        "üé≠ –í–≤–µ–¥–∏—Ç–µ –∂–∞–Ω—Ä —Å–µ—Ä–∏–∞–ª–∞:",
        reply_markup=get_cancel_keyboard()
    )

@router.message(AddSeriesStates.waiting_for_genre)
async def process_series_genre(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∂–∞–Ω—Ä–∞ —Å–µ—Ä–∏–∞–ª–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        del user_series_data[message.from_user.id]
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_series_submenu())
        return
    
    user_series_data[message.from_user.id]['genre'] = message.text.capitalize()
    await state.set_state(AddSeriesStates.waiting_for_year)
    await message.answer(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞:",
        reply_markup=get_cancel_keyboard()
    )

@router.message(AddSeriesStates.waiting_for_year)
async def process_series_year(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ–¥–∞ –≤—ã–ø—É—Å–∫–∞ —Å–µ—Ä–∏–∞–ª–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        del user_series_data[message.from_user.id]
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_series_submenu())
        return
    
    try:
        year = int(message.text)
        if year < 1800 or year > 2100:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≥–æ–¥. –í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –æ—Ç 1800 –¥–æ 2100:")
            return
        user_series_data[message.from_user.id]['year'] = year
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2020):")
        return
    
    await state.set_state(AddSeriesStates.waiting_for_seasons)
    await message.answer(
        "üìä –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∑–æ–Ω–æ–≤:",
        reply_markup=get_cancel_keyboard()
    )

@router.message(AddSeriesStates.waiting_for_seasons)
async def process_series_seasons(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–µ–∑–æ–Ω–æ–≤"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        del user_series_data[message.from_user.id]
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_series_submenu())
        return
    
    try:
        seasons = int(message.text)
        if seasons < 1:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∑–æ–Ω–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0:")
            return
        user_series_data[message.from_user.id]['seasons'] = seasons
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3):")
        return
    
    await state.set_state(AddSeriesStates.waiting_for_episodes)
    await message.answer(
        "üì∫ –í–≤–µ–¥–∏—Ç–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–∏–π:",
        reply_markup=get_cancel_keyboard()
    )

@router.message(AddSeriesStates.waiting_for_episodes)
async def process_series_episodes(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–µ—Ä–∏–π"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        del user_series_data[message.from_user.id]
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_series_submenu())
        return
    
    try:
        episodes = int(message.text)
        if episodes < 1:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0:")
            return
        user_series_data[message.from_user.id]['episodes'] = episodes
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 24):")
        return
    
    await state.set_state(AddSeriesStates.waiting_for_status)
    await message.answer(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å:",
        reply_markup=get_series_status_keyboard()
    )

@router.message(AddSeriesStates.waiting_for_status)
async def process_series_status(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–∏–∞–ª–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        del user_series_data[message.from_user.id]
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_series_submenu())
        return
    
    if message.text not in ["üì∫ –ù–µ —Å–º–æ—Ç—Ä–µ–ª", "üëÄ –°–º–æ—Ç—Ä—é", "‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–ª"]:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:")
        return
    
    user_series_data[message.from_user.id]['status'] = message.text
    await state.set_state(AddSeriesStates.waiting_for_rating)
    await message.answer(
        "‚≠ê –û—Ü–µ–Ω–∏—Ç–µ —Å–µ—Ä–∏–∞–ª (1-5 –∑–≤—ë–∑–¥):",
        reply_markup=get_rating_keyboard()
    )

@router.message(AddSeriesStates.waiting_for_rating)
async def process_series_rating(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å–µ—Ä–∏–∞–ª–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        del user_series_data[message.from_user.id]
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_series_submenu())
        return
    
    if message.text == "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        user_series_data[message.from_user.id]['rating'] = None
    else:
        try:
            rating = int(message.text.count('‚≠ê'))
            if rating < 1 or rating > 5:
                await message.answer("‚ùå –†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5 –∑–≤—ë–∑–¥:")
                return
            user_series_data[message.from_user.id]['rating'] = rating
        except:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ –∏–∑ –∫–Ω–æ–ø–æ–∫:")
            return
    
    await state.set_state(AddSeriesStates.waiting_for_notes)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")],
        ],
        resize_keyboard=True
    )
    await message.answer("üìù –î–æ–±–∞–≤—å—Ç–µ –∑–∞–º–µ—Ç–∫–∏ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å):", reply_markup=keyboard)

@router.message(AddSeriesStates.waiting_for_notes)
async def process_series_notes(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        del user_series_data[message.from_user.id]
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_series_submenu())
        return
    
    if message.text == "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        user_series_data[message.from_user.id]['notes'] = None
    else:
        user_series_data[message.from_user.id]['notes'] = message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    series_id = await db.add_series(
        user_id=message.from_user.id,
        title=user_series_data[message.from_user.id]['title'],
        genre=user_series_data[message.from_user.id]['genre'],
        year=user_series_data[message.from_user.id]['year'],
        overview='',
        seasons=user_series_data[message.from_user.id].get('seasons', 0),
        episodes=user_series_data[message.from_user.id].get('episodes', 0),
        status=user_series_data[message.from_user.id]['status'],
        rating=user_series_data[message.from_user.id].get('rating'),
        notes=user_series_data[message.from_user.id].get('notes')
    )
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets
    await asyncio.to_thread(
        google_sheets.add_media,
        message.from_user.id,
        message.from_user.username or message.from_user.first_name,
        {
            'id': series_id,
            'type': '–°–µ—Ä–∏–∞–ª',
            'title': user_series_data[message.from_user.id]['title'],
            'genre': user_series_data[message.from_user.id]['genre'],
            'year': user_series_data[message.from_user.id]['year'],
            'overview': '',
            'seasons': user_series_data[message.from_user.id].get('seasons', 0),
            'episodes': user_series_data[message.from_user.id].get('episodes', 0),
            'status': user_series_data[message.from_user.id]['status'],
            'rating': user_series_data[message.from_user.id].get('rating'),
            'notes': user_series_data[message.from_user.id].get('notes', '')
        }
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    result = f"‚úÖ –°–µ—Ä–∏–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
    result += f"üì∫ {user_series_data[message.from_user.id]['title']}\n"
    result += f"üé≠ {user_series_data[message.from_user.id]['genre']}\n"
    result += f"üìÖ {user_series_data[message.from_user.id]['year']}\n"
    result += f"üìä –°–µ–∑–æ–Ω–æ–≤: {user_series_data[message.from_user.id].get('seasons', 0)}, "
    result += f"–°–µ—Ä–∏–π: {user_series_data[message.from_user.id].get('episodes', 0)}\n"
    result += f"üì∫ {user_series_data[message.from_user.id]['status']}"
    
    if user_series_data[message.from_user.id].get('rating'):
        result += f"\n‚≠ê {'‚≠ê' * user_series_data[message.from_user.id]['rating']}"
    
    await state.clear()
    del user_series_data[message.from_user.id]
    await message.answer(result, reply_markup=get_series_submenu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–µ—Ä–∏–∞–ª–æ–≤
@router.message(F.text == "‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ")
async def show_watched_series_menu(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ —Å–µ—Ä–∏–∞–ª—ã —Å –≤—ã–±–æ—Ä–æ–º –∂–∞–Ω—Ä–∞"""
    await state.update_data(series_status=SERIES_STATUS_WATCHED)
    await state.set_state(ViewSeriesStates.waiting_for_genre)
    await message.answer(
        "‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–µ—Ä–∏–∞–ª–æ–≤:",
        reply_markup=get_genre_keyboard()
    )

@router.message(F.text == "üëÄ –°–º–æ—Ç—Ä—é")
async def show_watching_series_menu(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ—Ä–∏–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–º–æ—Ç—Ä—é, —Å –≤—ã–±–æ—Ä–æ–º –∂–∞–Ω—Ä–∞"""
    await state.update_data(series_status=SERIES_STATUS_WATCHING)
    await state.set_state(ViewSeriesStates.waiting_for_genre)
    await message.answer(
        "üëÄ –í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –¥–ª—è —Å–µ—Ä–∏–∞–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–º–æ—Ç—Ä–∏—Ç–µ:",
        reply_markup=get_genre_keyboard()
    )

@router.message(F.text == "üëÅ –ù–µ —Å–º–æ—Ç—Ä–µ–ª")
async def show_unwatched_series_menu(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ —Å–µ—Ä–∏–∞–ª—ã —Å –≤—ã–±–æ—Ä–æ–º –∂–∞–Ω—Ä–∞"""
    await state.update_data(series_status=SERIES_STATUS_UNWATCHED)
    await state.set_state(ViewSeriesStates.waiting_for_genre)
    await message.answer(
        "üëÅ –í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –¥–ª—è –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–µ—Ä–∏–∞–ª–æ–≤:",
        reply_markup=get_genre_keyboard()
    )

@router.message(ViewSeriesStates.waiting_for_genre)
async def show_series_by_genre(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ—Ä–∏–∞–ª—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∂–∞–Ω—Ä—É –∏ —Å—Ç–∞—Ç—É—Å—É"""
    if message.text == EMOJI_BACK:
        await state.clear()
        await message.answer("–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é", reply_markup=get_series_submenu())
        return
    
    genre = GENRE_MAP.get(message.text)
    if not genre:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup=get_genre_keyboard())
        return
    
    data = await state.get_data()
    status = data.get('series_status')
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–∏–∞–ª—ã —Å –Ω—É–∂–Ω—ã–º –∂–∞–Ω—Ä–æ–º –∏ —Å—Ç–∞—Ç—É—Å–æ–º
    all_series = await db.get_user_series(user_id)
    filtered_series = [s for s in all_series if s['genre'] == genre and s['status'] == status]
    
    if not filtered_series:
        await message.answer(
            f"üìã –£ –≤–∞—Å –Ω–µ—Ç —Å–µ—Ä–∏–∞–ª–æ–≤ –≤ –∂–∞–Ω—Ä–µ <b>{genre}</b> —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º <b>{status}</b>",
            reply_markup=get_series_submenu(),
            parse_mode=ParseMode.HTML
        )
        await state.clear()
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Å–µ—Ä–∏–∞–ª
    for series in filtered_series:
        text = format_series_text(series)
        
        # –ö–Ω–æ–ø–∫–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        buttons = []
        if status == SERIES_STATUS_UNWATCHED:
            buttons.append([InlineKeyboardButton(text="‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–ª", callback_data=f"mark_series_watched_{series['id']}")])
        buttons.append([InlineKeyboardButton(text=EMOJI_DELETE, callback_data=f"delete_series_{series['id']}")])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await message.answer(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
    
    await message.answer(
        f"üìä –í—Å–µ–≥–æ —Å–µ—Ä–∏–∞–ª–æ–≤: {len(filtered_series)}",
        reply_markup=get_series_submenu()
    )
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–º–µ—Ç–∫–∏ —Å–µ—Ä–∏–∞–ª–∞ –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–≥–æ
@router.callback_query(F.data.startswith("mark_series_watched_"))
async def mark_series_watched_callback(callback: CallbackQuery):
    """–û—Ç–º–µ—Ç–∏—Ç—å —Å–µ—Ä–∏–∞–ª –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π"""
    series_id = int(callback.data.split("_")[3])
    user_id = callback.from_user.id
    
    success = await db.update_series_status(series_id, user_id, SERIES_STATUS_WATCHED)
    
    if success:
        await callback.message.edit_text("‚úÖ –°–µ—Ä–∏–∞–ª –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π")
        await callback.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω", show_alert=False)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", show_alert=True)

@router.callback_query(F.data.startswith("delete_series_"))
async def delete_series_callback(callback: CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å —Å–µ—Ä–∏–∞–ª"""
    series_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    success = await db.delete_series(series_id, user_id)
    
    if success:
        await callback.message.edit_text("‚úÖ –°–µ—Ä–∏–∞–ª —É–¥–∞–ª—ë–Ω")
        await callback.answer("–£–¥–∞–ª–µ–Ω–æ", show_alert=False)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)

# –ú–µ–Ω—é –æ—Ç—á—ë—Ç–æ–≤
def get_reports_submenu():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –û–±—â–∏–π –æ—Ç—á—ë—Ç")],
            [KeyboardButton(text="üìà –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")],
            [KeyboardButton(text="üìâ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Å—è—Ü–µ–≤")],
            [KeyboardButton(text="‚óÄÔ∏è –ö —Ñ–∏–Ω–∞–Ω—Å–∞–º")],
        ],
        resize_keyboard=True
    )
    return keyboard

@router.message(F.text == "üìä –û—Ç—á–µ—Ç—ã")
async def show_finance_reports_menu(message: Message):
    """–ú–µ–Ω—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ—Ç—á—ë—Ç–æ–≤"""
    await message.answer(
        "üìä <b>–û—Ç—á–µ—Ç—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á—ë—Ç–∞:",
        parse_mode=ParseMode.HTML,
        reply_markup=get_reports_submenu()
    )

@router.message(F.text == "üìä –û–±—â–∏–π –æ—Ç—á—ë—Ç")
async def show_general_report(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â–∏–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á—ë—Ç –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"""
    user_id = message.from_user.id
    current_month = datetime.now().strftime('%m.%Y')
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    tips_stats = await db.get_tips_stats_by_month(user_id, current_month)
    avito_stats = await db.get_avito_stats(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü
    all_expenses = await db.get_user_expenses(user_id)
    month_expenses = [e for e in all_expenses if e['expense_date'].endswith(current_month)]
    total_expenses = sum(e['amount'] for e in month_expenses)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã
    recurring = await db.get_user_recurring_expenses(user_id)
    total_recurring = sum(r['amount'] for r in recurring)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
    text = f"üìä <b>–û–±—â–∏–π –æ—Ç—á—ë—Ç –∑–∞ {datetime.now().strftime('%B %Y')}</b>\n\n"
    
    # –î–æ—Ö–æ–¥—ã
    text += "üí∞ <b>–î–æ—Ö–æ–¥—ã:</b>\n"
    tips_total = tips_stats['total_amount'] if tips_stats else 0
    avito_total = avito_stats['total_amount'] if avito_stats else 0
    total_income = tips_total + avito_total
    
    if tips_total > 0:
        text += f"  ‚îî –°–º–µ–Ω—ã: {tips_total:,.0f} ‚ÇΩ\n"
    if avito_total > 0:
        text += f"  ‚îî –ê–≤–∏—Ç–æ: {avito_total:,.0f} ‚ÇΩ\n"
    text += f"  <b>–ò—Ç–æ–≥–æ: {total_income:,.0f} ‚ÇΩ</b>\n\n"
    
    # –†–∞—Å—Ö–æ–¥—ã
    text += "üí∏ <b>–†–∞—Å—Ö–æ–¥—ã:</b>\n"
    if total_recurring > 0:
        text += f"  ‚îî –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ: {total_recurring:,.0f} ‚ÇΩ\n"
    if total_expenses > 0:
        text += f"  ‚îî –¢—Ä–∞—Ç—ã: {total_expenses:,.0f} ‚ÇΩ\n"
    total_expense = total_recurring + total_expenses
    text += f"  <b>–ò—Ç–æ–≥–æ: {total_expense:,.0f} ‚ÇΩ</b>\n\n"
    
    await message.answer(text, parse_mode=ParseMode.HTML, reply_markup=get_reports_submenu())

@router.message(F.text == "üìà –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
async def show_category_report(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á—ë—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ç—Ä–∞—Ç"""
    user_id = message.from_user.id
    current_month = datetime.now().strftime('%m.%Y')
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories = await db.get_expenses_by_category(user_id, current_month)
    
    if not categories:
        await message.answer(
            "üìà –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞—Ç –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ.",
            reply_markup=get_reports_submenu()
        )
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—É–º–º–µ
    categories.sort(key=lambda x: x['total'], reverse=True)
    total = sum(c['total'] for c in categories)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
    text = f"üìà <b>–¢—Ä–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞ {datetime.now().strftime('%B')}</b>\n\n"
    
    for cat in categories:
        percentage = (cat['total'] / total * 100) if total > 0 else 0
        text += f"{cat['category']}: {cat['total']:,.0f} ‚ÇΩ ({percentage:.1f}%)\n"
    
    text += f"\nüí∞ <b>–í—Å–µ–≥–æ: {total:,.0f} ‚ÇΩ</b>"
    
    await message.answer(text, parse_mode=ParseMode.HTML, reply_markup=get_reports_submenu())

@router.message(F.text == "üìâ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Å—è—Ü–µ–≤")
async def show_comparison_report(message: Message):
    """–°—Ä–∞–≤–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º"""
    user_id = message.from_user.id
    
    current_month = datetime.now().strftime('%m.%Y')
    prev_date = datetime.now().replace(day=1) - timedelta(days=1)
    prev_month = prev_date.strftime('%m.%Y')
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    current_expenses = await db.get_user_expenses(user_id)
    current_month_expenses = [e for e in current_expenses if e['expense_date'].endswith(current_month)]
    current_total = sum(e['amount'] for e in current_month_expenses)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    prev_month_expenses = [e for e in current_expenses if e['expense_date'].endswith(prev_month)]
    prev_total = sum(e['amount'] for e in prev_month_expenses)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
    text = "üìâ <b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Å—è—Ü–µ–≤</b>\n\n"
    
    text += f"<b>{prev_date.strftime('%B')}:</b> {prev_total:,.0f} ‚ÇΩ\n"
    text += f"<b>{datetime.now().strftime('%B')}:</b> {current_total:,.0f} ‚ÇΩ\n\n"
    
    if current_total > prev_total:
        diff = current_total - prev_total
        text += f"üìà –†–∞—Å—Ö–æ–¥—ã –≤—ã—Ä–æ—Å–ª–∏ –Ω–∞ {diff:,.0f} ‚ÇΩ"
    elif current_total < prev_total:
        diff = prev_total - current_total
        text += f"üìâ –†–∞—Å—Ö–æ–¥—ã —Å–Ω–∏–∑–∏–ª–∏—Å—å –Ω–∞ {diff:,.0f} ‚ÇΩ"
    else:
        text += "‚û°Ô∏è –†–∞—Å—Ö–æ–¥—ã –æ—Å—Ç–∞–ª–∏—Å—å –Ω–∞ —Ç–æ–º –∂–µ —É—Ä–æ–≤–Ω–µ"
    
    await message.answer(text, parse_mode=ParseMode.HTML, reply_markup=get_reports_submenu())

# ===== –ß–ê–ï–í–´–ï =====

@router.message(F.text == "üíº –°–º–µ–Ω–∞")
async def show_tips_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å–º–µ–Ω"""
    await message.answer(
        "üíº <b>–°–º–µ–Ω–∞</b>\n\n–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–≤–æ–∏—Ö —Å–º–µ–Ω–∞—Ö:",
        reply_markup=get_tips_submenu(),
        parse_mode=ParseMode.HTML
    )

@router.message(F.text == "‚ûï –ù–æ–≤–∞—è —Å–º–µ–Ω–∞")
async def add_tips_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–º–µ–Ω—ã"""
    user_tips_data[message.from_user.id] = {}
    await state.set_state(AddTipsStates.waiting_for_hours)
    await message.answer(
        "‚è∞ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–∞—Å–æ–≤:\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 8 –∏–ª–∏ 5.5).",
        reply_markup=get_cancel_keyboard()
    )

@router.message(AddTipsStates.waiting_for_hours)
async def process_tips_hours(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞—Å–æ–≤"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_menu())
        return
    
    try:
        hours = float(message.text.replace(',', '.'))
        if hours <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        user_tips_data[message.from_user.id]['hours_worked'] = hours
        await state.set_state(AddTipsStates.waiting_for_card)
        await message.answer(
            f"‚úÖ –ß–∞—Å–æ–≤ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: {hours}\n\n"
            "üí≥ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∞–µ–≤—ã—Ö –Ω–∞ –¥–µ–±–µ—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç—ã:\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –±—ã–ª–æ.",
            reply_markup=get_skip_keyboard()
        )
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 8 –∏–ª–∏ 5.5):"
        )

@router.message(AddTipsStates.waiting_for_card)
async def process_tips_card(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º—ã –Ω–∞ –∫–∞—Ä—Ç—ã"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        del user_tips_data[message.from_user.id]
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_finance_submenu())
        return
    
    if message.text == "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        user_tips_data[message.from_user.id]['card'] = 0
    else:
        try:
            amount = float(message.text.replace(',', '.'))
            if amount < 0:
                await message.answer("‚ùå –°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
                return
            user_tips_data[message.from_user.id]['card'] = amount
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª:")
            return
    
    await state.set_state(AddTipsStates.waiting_for_netmonet)
    await message.answer(
        "üì± –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∞–µ–≤—ã—Ö –Ω–∞ –ù–µ—Ç.–ú–æ–Ω–µ—Ç:\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –±—ã–ª–æ.",
        reply_markup=get_skip_keyboard()
    )

@router.message(AddTipsStates.waiting_for_netmonet)
async def process_tips_netmonet(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º—ã –Ω–∞ –ù–µ—Ç.–ú–æ–Ω–µ—Ç"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        del user_tips_data[message.from_user.id]
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_finance_submenu())
        return
    
    if message.text == "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        user_tips_data[message.from_user.id]['netmonet'] = 0
    else:
        try:
            amount = float(message.text.replace(',', '.'))
            if amount < 0:
                await message.answer("‚ùå –°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
                return
            user_tips_data[message.from_user.id]['netmonet'] = amount
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª:")
            return
    
    await state.set_state(AddTipsStates.waiting_for_cash)
    await message.answer(
        "üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞–ª–∏—á–Ω—ã—Ö —á–∞–µ–≤—ã—Ö:\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –±—ã–ª–æ.",
        reply_markup=get_skip_keyboard()
    )

@router.message(AddTipsStates.waiting_for_cash)
async def process_tips_cash(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º—ã –Ω–∞–ª–∏—á–Ω—ã—Ö"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        del user_tips_data[message.from_user.id]
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_finance_submenu())
        return
    
    if message.text == "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        user_tips_data[message.from_user.id]['cash'] = 0
    else:
        try:
            amount = float(message.text.replace(',', '.'))
            if amount < 0:
                await message.answer("‚ùå –°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
                return
            user_tips_data[message.from_user.id]['cash'] = amount
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª:")
            return
    
    await state.set_state(AddTipsStates.waiting_for_date)
    await message.answer(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–æ–≥–¥–∞ –±—ã–ª–∏ —ç—Ç–∏ —á–∞–µ–≤—ã–µ:\n\n"
        "–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 06.10.2025)\n"
        "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –î–î.–ú–ú (–≥–æ–¥ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)",
        reply_markup=get_cancel_keyboard()
    )

@router.message(AddTipsStates.waiting_for_date)
async def process_tips_date(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã —á–∞–µ–≤—ã—Ö –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        del user_tips_data[message.from_user.id]
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_finance_submenu())
        return
    
    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
    try:
        date_parts = message.text.strip().split('.')
        if len(date_parts) == 2:
            # –¢–æ–ª—å–∫–æ –¥–µ–Ω—å –∏ –º–µ—Å—è—Ü - –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥
            day, month = date_parts
            year = datetime.now().year
        elif len(date_parts) == 3:
            day, month, year = date_parts
        else:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        tips_date = datetime(int(year), int(month), int(day))
        user_tips_data[message.from_user.id]['date'] = tips_date.strftime('%d.%m.%Y')
        
    except (ValueError, IndexError):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 06.10.2025 –∏–ª–∏ 06.10"
        )
        return
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞–≤–∫—É –∏ —á–∞–µ–≤—ã–µ
    hours_worked = user_tips_data[message.from_user.id].get('hours_worked', 0)
    wage = hours_worked * 180  # –°—Ç–∞–≤–∫–∞: 180‚ÇΩ/—á–∞—Å
    
    card = user_tips_data[message.from_user.id]['card']
    netmonet = user_tips_data[message.from_user.id]['netmonet']
    cash = user_tips_data[message.from_user.id]['cash']
    tips_total = card + netmonet + cash  # –ß–∞–µ–≤—ã–µ
    
    total = wage + tips_total  # –ò—Ç–æ–≥–æ = —Å—Ç–∞–≤–∫–∞ + —á–∞–µ–≤—ã–µ
    
    user_tips_data[message.from_user.id]['wage'] = wage
    user_tips_data[message.from_user.id]['tips_total'] = tips_total
    user_tips_data[message.from_user.id]['total'] = total
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    tips_id = await db.add_tips(
        user_id=message.from_user.id,
        tips_date=user_tips_data[message.from_user.id]['date'],
        card_amount=card,
        netmonet_amount=netmonet,
        cash_amount=cash,
        total_amount=total,
        hours_worked=hours_worked
    )
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets
    if google_sheets.enabled:
        await asyncio.to_thread(
            google_sheets.add_tips,
            message.from_user.id,
            message.from_user.full_name,
            {
                'id': tips_id,
                'date': user_tips_data[message.from_user.id]['date'],
                'card': card,
                'netmonet': netmonet,
                'cash': cash,
                'total': total
            }
        )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    date_short = tips_date.strftime('%d.%m')
    result_message = (
        f"‚úÖ –°–º–µ–Ω–∞ –∑–∞ {date_short} –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
        f"‚è∞ –ß–∞—Å–æ–≤ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: {hours_worked}\n"
        f"üíº –°—Ç–∞–≤–∫–∞ (180‚ÇΩ/—á): {wage:,.0f} ‚ÇΩ\n"
        f"üí∞ –ß–∞–µ–≤—ã–µ: {tips_total:,.0f} ‚ÇΩ\n"
        f"üíµ <b>–ò–¢–û–ì–û: {total:,.0f} ‚ÇΩ</b>\n\n"
        f"<i>–ß–∞–µ–≤—ã–µ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:</i>\n"
        f"üí≥ –ö–∞—Ä—Ç—ã: {card:,.0f} ‚ÇΩ\n"
        f"üì± –ù–µ—Ç.–ú–æ–Ω–µ—Ç: {netmonet:,.0f} ‚ÇΩ\n"
        f"üíµ –ù–∞–ª–∏—á–Ω—ã–µ: {cash:,.0f} ‚ÇΩ"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    motivation = get_motivation_message(tips_total)
    if motivation:
        result_message += f"\n\n{motivation}"
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —á–∞–µ–≤—ã—Ö
    distribution = calculate_tips_distribution(tips_total)
    result_message += f"\n\n{format_distribution(distribution)}"
    
    await state.clear()
    del user_tips_data[message.from_user.id]
    await message.answer(result_message, reply_markup=get_tips_submenu(), parse_mode=ParseMode.HTML)

@router.message(F.text == "üìã –ú–æ–∏ —Å–º–µ–Ω—ã")
async def show_my_tips(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–º–µ–Ω —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    await show_tips_page(message, offset=0)

async def show_tips_page(message: Message, offset: int = 0):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å–º–µ–Ω–∞–º–∏"""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–º–µ–Ω—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    tips_list = await db.get_user_tips(user_id, limit=TIPS_PER_PAGE, offset=offset)
    total_count = await db.count_user_tips(user_id)
    
    if not tips_list:
        await message.answer(
            "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ —Å–º–µ–Ω–∞—Ö.\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Å–º–µ–Ω—É —á–µ—Ä–µ–∑ ¬´‚ûï –ù–æ–≤–∞—è —Å–º–µ–Ω–∞¬ª",
            reply_markup=get_tips_submenu()
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
    text = "üìã <b>–ú–æ–∏ —Å–º–µ–Ω—ã:</b>\n\n"
    for tip in tips_list:
        hours = tip.get('hours_worked', 0)
        text += f"<b>{tip['tips_date']}</b>\n"
        text += f"  ‚è∞ {hours}—á ‚Ä¢ üí∞ {tip['total_amount']:,.0f} ‚ÇΩ\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    
    has_more = (offset + TIPS_PER_PAGE) < total_count
    if has_more:
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=f"üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ ({total_count - offset - TIPS_PER_PAGE} –æ—Å—Ç–∞–ª–æ—Å—å)",
                callback_data=f"tips_more_{offset + TIPS_PER_PAGE}"
            )
        ])
    
    await message.answer(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)

@router.callback_query(F.data.startswith("tips_more_"))
async def load_more_tips(callback: CallbackQuery):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ —á–∞–µ–≤—ã–µ"""
    offset = int(callback.data.split("_")[2])
    await show_tips_page(callback.message, offset)
    await callback.answer()

@router.message(F.text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–º–µ–Ω")
async def show_tips_statistics(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –º–µ—Å—è—Ü–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–º–µ–Ω"""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–µ—Å—è—Ü–µ–≤ —Å–æ —Å–º–µ–Ω–∞–º–∏
    months = await db.get_tips_months(user_id)
    
    if not months:
        await message.answer(
            "üìà –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ —Å–º–µ–Ω–∞—Ö.\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Å–º–µ–Ω—É —á–µ—Ä–µ–∑ ¬´‚ûï –ù–æ–≤–∞—è —Å–º–µ–Ω–∞¬ª",
            reply_markup=get_tips_submenu()
        )
        return
    
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Å—è—Ü–µ–≤
    month_names = {
        '01': '–Ø–Ω–≤–∞—Ä—å', '02': '–§–µ–≤—Ä–∞–ª—å', '03': '–ú–∞—Ä—Ç', '04': '–ê–ø—Ä–µ–ª—å',
        '05': '–ú–∞–π', '06': '–ò—é–Ω—å', '07': '–ò—é–ª—å', '08': '–ê–≤–≥—É—Å—Ç',
        '09': '–°–µ–Ω—Ç—è–±—Ä—å', '10': '–û–∫—Ç—è–±—Ä—å', '11': '–ù–æ—è–±—Ä—å', '12': '–î–µ–∫–∞–±—Ä—å'
    }
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–µ—Å—è—Ü–∞–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    
    for month_year in months:
        month, year = month_year.split('.')
        month_name = month_names.get(month, month)
        button_text = f"{month_name} {year}"
        
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=button_text,
                callback_data=f"tipstats_{month_year}"
            )
        ])
    
    await message.answer(
        "üìà <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:</b>",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )

@router.callback_query(F.data.startswith("tipstats_"))
async def show_month_statistics(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü"""
    month_year = callback.data.split("_")[1]
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await db.get_tips_stats_by_month(user_id, month_year)
    
    if not stats or stats['shifts_count'] == 0:
        await callback.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü", show_alert=True)
        return
    
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Å—è—Ü–µ–≤
    month_names = {
        '01': '–Ø–Ω–≤–∞—Ä—å', '02': '–§–µ–≤—Ä–∞–ª—å', '03': '–ú–∞—Ä—Ç', '04': '–ê–ø—Ä–µ–ª—å',
        '05': '–ú–∞–π', '06': '–ò—é–Ω—å', '07': '–ò—é–ª—å', '08': '–ê–≤–≥—É—Å—Ç',
        '09': '–°–µ–Ω—Ç—è–±—Ä—å', '10': '–û–∫—Ç—è–±—Ä—å', '11': '–ù–æ—è–±—Ä—å', '12': '–î–µ–∫–∞–±—Ä—å'
    }
    
    month, year = month_year.split('.')
    month_name = month_names.get(month, month)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    total_hours = stats.get('total_hours', 0) or 0
    text = (
        f"üìä <b>{month_name} {year}</b>\n\n"
        f"üî¢ –°–º–µ–Ω –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['shifts_count']}\n"
        f"‚è∞ –ß–∞—Å–æ–≤ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_hours}\n"
        f"üí∞ –ò—Ç–æ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['total_tips']:,.0f} ‚ÇΩ\n\n"
        f"üí≥ –ö–∞—Ä—Ç—ã: {stats['total_card']:,.0f} ‚ÇΩ\n"
        f"üì± –ù–µ—Ç.–ú–æ–Ω–µ—Ç: {stats['total_netmonet']:,.0f} ‚ÇΩ\n"
        f"üíµ –ù–∞–ª–∏—á–Ω—ã–µ: {stats['total_cash']:,.0f} ‚ÇΩ\n\n"
        f"üìà –°—Ä–µ–¥–Ω–µ–µ –∑–∞ —Å–º–µ–Ω—É: {stats['avg_tips']:,.0f} ‚ÇΩ"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—É–º–º–∞—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞ –º–µ—Å—è—Ü (—Ç–æ–ª—å–∫–æ –¥–ª—è —á–∞–µ–≤—ã—Ö, –±–µ–∑ —Å—Ç–∞–≤–∫–∏)
    tips_only = (stats.get('total_card', 0) or 0) + (stats.get('total_netmonet', 0) or 0) + (stats.get('total_cash', 0) or 0)
    if tips_only > 0:
        distribution = calculate_tips_distribution(tips_only)
        text += f"\n\n{format_distribution(distribution)}"
    
    await callback.message.answer(text, parse_mode=ParseMode.HTML)
    await callback.answer()

# ===== –í–ò–®–õ–ò–°–¢ =====

@router.message(F.text == "‚≠ê –í–∏—à–ª–∏—Å—Ç")
async def show_wishlist_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤–∏—à–ª–∏—Å—Ç–∞"""
    await message.answer(
        "üéÅ <b>–í–∏—à–ª–∏—Å—Ç</b>\n\n–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–ø–∏—Å–∫–æ–º –∂–µ–ª–∞–Ω–∏–π:",
        reply_markup=get_wishlist_submenu(),
        parse_mode=ParseMode.HTML
    )

@router.message(F.text == "‚óÄÔ∏è –ö –ª–∏—á–Ω–æ–º—É")
async def back_to_personal(message: Message, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ª–∏—á–Ω–æ–º—É –º–µ–Ω—é"""
    await state.clear()
    await message.answer(
        "üë§ <b>–õ–∏—á–Ω–æ–µ</b>",
        reply_markup=get_personal_submenu(),
        parse_mode=ParseMode.HTML
    )

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ")
async def add_wishlist_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –≤–∏—à–ª–∏—Å—Ç"""
    user_wishlist_data[message.from_user.id] = {}
    await state.set_state(AddWishlistStates.waiting_for_size_category)
    await message.answer(
        "üì¶ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–æ–∫—É–ø–∫–∏:</b>",
        reply_markup=get_wishlist_size_keyboard(),
        parse_mode=ParseMode.HTML
    )

@router.message(AddWishlistStates.waiting_for_size_category)
async def process_wishlist_size(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞"""
    if message.text == EMOJI_CANCEL:
        await state.clear()
        del user_wishlist_data[message.from_user.id]
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_wishlist_submenu())
        return
    
    if message.text not in WISHLIST_SIZE_CATEGORIES:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return
    
    user_wishlist_data[message.from_user.id]['size_category'] = message.text
    await state.set_state(AddWishlistStates.waiting_for_type_category)
    await message.answer(
        "üè∑ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∫—É–ø–∫–∏:</b>",
        reply_markup=get_wishlist_type_keyboard(),
        parse_mode=ParseMode.HTML
    )

@router.message(AddWishlistStates.waiting_for_type_category)
async def process_wishlist_type(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞"""
    if message.text == EMOJI_CANCEL:
        await state.clear()
        del user_wishlist_data[message.from_user.id]
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_wishlist_submenu())
        return
    
    if message.text not in WISHLIST_TYPE_CATEGORIES:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return
    
    user_wishlist_data[message.from_user.id]['type_category'] = message.text
    await state.set_state(AddWishlistStates.waiting_for_name)
    await message.answer(
        "üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è:</b>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: iPhone 15 Pro –∏–ª–∏ –ù–æ–≤—ã–µ –∫—Ä–æ—Å—Å–æ–≤–∫–∏",
        reply_markup=get_cancel_keyboard(),
        parse_mode=ParseMode.HTML
    )

@router.message(AddWishlistStates.waiting_for_name)
async def process_wishlist_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è"""
    if message.text == EMOJI_CANCEL:
        await state.clear()
        del user_wishlist_data[message.from_user.id]
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_wishlist_submenu())
        return
    
    user_wishlist_data[message.from_user.id]['name'] = message.text
    await state.set_state(AddWishlistStates.waiting_for_price)
    await message.answer(
        "üí∞ <b>–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (–≤ —Ä—É–±–ª—è—Ö):</b>\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª –µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ",
        reply_markup=get_skip_keyboard(),
        parse_mode=ParseMode.HTML
    )

@router.message(AddWishlistStates.waiting_for_price)
async def process_wishlist_price(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã"""
    if message.text == EMOJI_CANCEL:
        await state.clear()
        del user_wishlist_data[message.from_user.id]
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_wishlist_submenu())
        return
    
    if message.text == EMOJI_SKIP:
        user_wishlist_data[message.from_user.id]['price'] = None
    else:
        try:
            price = float(message.text.replace(',', '.').replace(' ', ''))
            user_wishlist_data[message.from_user.id]['price'] = price
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª:")
            return
    
    await state.set_state(AddWishlistStates.waiting_for_priority)
    await message.answer(
        "‚≠êÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b>",
        reply_markup=get_wishlist_priority_keyboard(),
        parse_mode=ParseMode.HTML
    )

@router.message(AddWishlistStates.waiting_for_priority)
async def process_wishlist_priority(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
    if message.text == EMOJI_CANCEL:
        await state.clear()
        del user_wishlist_data[message.from_user.id]
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_wishlist_submenu())
        return
    
    if message.text not in WISHLIST_PRIORITIES:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return
    
    user_wishlist_data[message.from_user.id]['priority'] = message.text
    await state.set_state(AddWishlistStates.waiting_for_photo)
    await message.answer(
        "üì∏ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª",
        reply_markup=get_skip_keyboard(),
        parse_mode=ParseMode.HTML
    )

@router.message(AddWishlistStates.waiting_for_photo)
async def process_wishlist_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ"""
    if message.text == EMOJI_CANCEL:
        await state.clear()
        del user_wishlist_data[message.from_user.id]
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_wishlist_submenu())
        return
    
    if message.text == EMOJI_SKIP:
        user_wishlist_data[message.from_user.id]['photo_url'] = None
    elif message.photo:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id —Ñ–æ—Ç–æ
        user_wishlist_data[message.from_user.id]['photo_url'] = message.photo[-1].file_id
    else:
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª:")
        return
    
    await state.set_state(AddWishlistStates.waiting_for_link)
    await message.answer(
        "üîó <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä</b>\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª",
        reply_markup=get_skip_keyboard(),
        parse_mode=ParseMode.HTML
    )

@router.message(AddWishlistStates.waiting_for_link)
async def process_wishlist_link(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"""
    if message.text == EMOJI_CANCEL:
        await state.clear()
        del user_wishlist_data[message.from_user.id]
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_wishlist_submenu())
        return
    
    if message.text == EMOJI_SKIP:
        user_wishlist_data[message.from_user.id]['link'] = None
    else:
        user_wishlist_data[message.from_user.id]['link'] = message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    data = user_wishlist_data[message.from_user.id]
    item_id = await db.add_wishlist_item(
        user_id=message.from_user.id,
        name=data['name'],
        size_category=data['size_category'],
        type_category=data['type_category'],
        price=data.get('price'),
        priority=data.get('priority'),
        photo_url=data.get('photo_url'),
        link=data.get('link')
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    result_text = f"‚úÖ <b>–ñ–µ–ª–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!</b>\n\n"
    result_text += f"üì¶ {data['name']}\n"
    result_text += f"üè∑ {data['type_category']}\n"
    result_text += f"üìè {data['size_category']}\n"
    
    if data.get('price'):
        result_text += f"üí∞ {data['price']:,.0f} ‚ÇΩ\n"
    
    if data.get('priority'):
        result_text += f"‚≠êÔ∏è {data['priority']}\n"
    
    await state.clear()
    del user_wishlist_data[message.from_user.id]
    
    await message.answer(result_text, reply_markup=get_wishlist_submenu(), parse_mode=ParseMode.HTML)

@router.message(F.text == "üìã –ú–æ–π –≤–∏—à–ª–∏—Å—Ç")
async def show_my_wishlist(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∏—à–ª–∏—Å—Ç"""
    user_id = message.from_user.id
    
    items = await db.get_user_wishlist(user_id)
    
    if not items:
        await message.answer(
            "üìã –í–∞—à –≤–∏—à–ª–∏—Å—Ç –ø—É—Å—Ç.\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ —á–µ—Ä–µ–∑ ¬´‚ûï –î–æ–±–∞–≤–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ¬ª",
            reply_markup=get_wishlist_submenu()
        )
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
    by_priority = {}
    for item in items:
        priority = item.get('priority', 'üí≠ –ö–æ–≥–¥–∞-–Ω–∏–±—É–¥—å')
        if priority not in by_priority:
            by_priority[priority] = []
        by_priority[priority].append(item)
    
    text = "üéÅ <b>–í–∞—à –≤–∏—à–ª–∏—Å—Ç:</b>\n\n"
    
    for priority in WISHLIST_PRIORITIES:
        if priority in by_priority:
            text += f"\n<b>{priority}</b>\n"
            for item in by_priority[priority]:
                text += f"‚Ä¢ {item['name']}"
                if item.get('price'):
                    text += f" ‚Äî {item['price']:,.0f} ‚ÇΩ"
                text += f" ({item['type_category']})\n"
    
    text += f"\nüìä –í—Å–µ–≥–æ –∂–µ–ª–∞–Ω–∏–π: {len(items)}"
    
    await message.answer(text, reply_markup=get_wishlist_submenu(), parse_mode=ParseMode.HTML)

def create_lockfile():
    """–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
    if LOCKFILE.exists():
        logger.error("‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.")
        logger.error("–ï—Å–ª–∏ –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω, —É–¥–∞–ª–∏—Ç–µ —Ñ–∞–π–ª .bot.lock")
        sys.exit(1)
    
    LOCKFILE.write_text(str(os.getpid()))
    logger.info(f"‚úÖ Lockfile —Å–æ–∑–¥–∞–Ω (PID: {os.getpid()})")

def remove_lockfile():
    """–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
    if LOCKFILE.exists():
        LOCKFILE.unlink()
        logger.info("üóë Lockfile —É–¥–∞–ª–µ–Ω")

async def send_period_reminder(bot: Bot, user_id: int, start_date: str, end_date: str, period_name: str):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–µ—Ä–∏–æ–¥–µ"""
    try:
        stats = await db.get_tips_stats_by_period(user_id, start_date, end_date)
        
        if not stats or stats['shifts_count'] == 0:
            return
        
        # –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞–≤–∫—É (hours * 180)
        total_hours = stats.get('total_hours', 0) or 0
        wage = total_hours * 180
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = (
            f"üíº <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞—Ä–ø–ª–∞—Ç–µ</b>\n\n"
            f"üìÖ –ü–µ—Ä–∏–æ–¥: {period_name}\n"
            f"({start_date} - {end_date})\n\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –°–º–µ–Ω: {stats['shifts_count']}\n"
            f"‚Ä¢ –ß–∞—Å–æ–≤: {total_hours}\n"
            f"‚Ä¢ üíº –°—Ç–∞–≤–∫–∞: {wage:,.0f} ‚ÇΩ\n\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏
        if wage > 0:
            distribution = calculate_wage_distribution(wage)
            text += format_wage_distribution(distribution)
        
        await bot.send_message(user_id, text, parse_mode=ParseMode.HTML)
        logger.info(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –∑–∞ –ø–µ—Ä–∏–æ–¥ {period_name}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")


async def check_and_send_reminders(bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    while True:
        try:
            now = datetime.now()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è: 10:00 —É—Ç—Ä–∞
            if now.hour == 10 and now.minute == 0:
                day = now.day
                
                # 5-–≥–æ —á–∏—Å–ª–∞: –ø–µ—Ä–∏–æ–¥ 15-31 –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
                if day == 5:
                    if now.month == 1:
                        prev_month = 12
                        prev_year = now.year - 1
                    else:
                        prev_month = now.month - 1
                        prev_year = now.year
                    
                    # –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
                    if prev_month in [1, 3, 5, 7, 8, 10, 12]:
                        last_day = 31
                    elif prev_month in [4, 6, 9, 11]:
                        last_day = 30
                    else:
                        last_day = 29 if prev_year % 4 == 0 and (prev_year % 100 != 0 or prev_year % 400 == 0) else 28
                    
                    start_date = f"15.{prev_month:02d}.{prev_year}"
                    end_date = f"{last_day}.{prev_month:02d}.{prev_year}"
                    period_name = f"15-{last_day} {['—è–Ω–≤', '—Ñ–µ–≤', '–º–∞—Ä', '–∞–ø—Ä', '–º–∞–π', '–∏—é–Ω', '–∏—é–ª', '–∞–≤–≥', '—Å–µ–Ω', '–æ–∫—Ç', '–Ω–æ—è', '–¥–µ–∫'][prev_month-1]}"
                    
                    users = await db.get_all_users()
                    for user_id in users:
                        await send_period_reminder(bot, user_id, start_date, end_date, period_name)
                
                # 25-–≥–æ —á–∏—Å–ª–∞: –ø–µ—Ä–∏–æ–¥ 1-15 —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
                elif day == 25:
                    start_date = f"01.{now.month:02d}.{now.year}"
                    end_date = f"15.{now.month:02d}.{now.year}"
                    period_name = f"1-15 {['—è–Ω–≤', '—Ñ–µ–≤', '–º–∞—Ä', '–∞–ø—Ä', '–º–∞–π', '–∏—é–Ω', '–∏—é–ª', '–∞–≤–≥', '—Å–µ–Ω', '–æ–∫—Ç', '–Ω–æ—è', '–¥–µ–∫'][now.month-1]}"
                    
                    users = await db.get_all_users()
                    for user_id in users:
                        await send_period_reminder(bot, user_id, start_date, end_date, period_name)
                
                await asyncio.sleep(60)  # –°–ø–∏–º –º–∏–Ω—É—Ç—É –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            else:
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
            await asyncio.sleep(60)


async def shutdown(signal_name=None):
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
    if signal_name:
        logger.info(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signal_name}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
    else:
        logger.info("‚ö†Ô∏è –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
    await db.close()
    logger.info("‚úÖ –ë–î –∑–∞–∫—Ä—ã—Ç–∞")
    
    # –£–¥–∞–ª—è–µ–º lockfile
    remove_lockfile()

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º lockfile
    create_lockfile()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
    atexit.register(remove_lockfile)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await db.init_db()
    
    # –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
    if google_sheets.connect():
        logger.info(f"üìä Google Sheets: {google_sheets.get_spreadsheet_url()}")
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ª–∏—Å—Ç–æ–≤ –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(asyncio.to_thread(google_sheets.lazy_init_sheets))
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    bot = Bot(TOKEN)
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
    dp.include_router(router)
    
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    logger.info("‚ö°Ô∏è –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ (TTL: 10 –º–∏–Ω—É—Ç)")
    logger.info("üìÑ –ü–∞–≥–∏–Ω–∞—Ü–∏—è: {} –º–µ—Å—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ".format(PLACES_PER_PAGE))
    logger.info("üöÑ –§–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets")
    logger.info("üîî –°–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ (5-–µ –∏ 25-–µ —á–∏—Å–ª–∞ –≤ 10:00)")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(check_and_send_reminders(bot))
    
    try:
        # –ó–∞–ø—É—Å–∫ polling —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        await dp.start_polling(bot, timeout=60, request_timeout=30)
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise
    finally:
        await shutdown()

if __name__ == "__main__":
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        for sig in (signal.SIGTERM, signal.SIGINT):
            loop.add_signal_handler(
                sig,
                lambda s=sig: asyncio.create_task(shutdown(signal.Signals(s).name))
            )
        
        loop.run_until_complete(main())
    except KeyboardInterrupt:
        logger.info("‚å®Ô∏è –ü–æ–ª—É—á–µ–Ω Ctrl+C")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
    finally:
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

