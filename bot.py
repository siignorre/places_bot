import asyncio
import logging
import sys
from os import getenv
from dotenv import load_dotenv
from datetime import datetime

from aiogram import Bot, Dispatcher, Router, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    Message, 
    CallbackQuery, 
    InlineKeyboardMarkup, 
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database import Database

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = getenv("BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, stream=sys.stdout)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
dp = Dispatcher()
router = Router()
db = Database()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–∞
class AddPlaceStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_type = State()
    waiting_for_price = State()
    waiting_for_address = State()
    waiting_for_description = State()
    waiting_for_location = State()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –æ –º–µ—Å—Ç–µ
user_place_data = {}

# –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
def format_date(date_str):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì"""
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ (—Ñ–æ—Ä–º–∞—Ç SQLite: YYYY-MM-DD HH:MM:SS)
        dt = datetime.strptime(date_str, '%Y-%m-%d %H:%M:%S')
        return dt.strftime('%d.%m.%Y')
    except:
        return date_str

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ"), KeyboardButton(text="üéâ –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")],
            [KeyboardButton(text="üìã –ú–æ–∏ –º–µ—Å—Ç–∞"), KeyboardButton(text="üîç –ü–æ–∏—Å–∫")],
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        ],
        resize_keyboard=True
    )
    return keyboard

# –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
def get_cancel_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    )
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –º–µ—Å—Ç–∞
def get_place_type_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üç∫ –ë–∞—Ä"), KeyboardButton(text="‚òïÔ∏è –ö–∞—Ñ–µ")],
            [KeyboardButton(text="üçΩ –†–µ—Å—Ç–æ—Ä–∞–Ω"), KeyboardButton(text="üèõ –ú—É–∑–µ–π")],
            [KeyboardButton(text="üå≥ –ü–∞—Ä–∫"), KeyboardButton(text="üìç –õ–æ–∫–∞—Ü–∏—è")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ü–µ–Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
def get_price_category_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üí≤"), KeyboardButton(text="üí≤üí≤"), KeyboardButton(text="üí≤üí≤üí≤")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )
    return keyboard

@router.message(CommandStart())
async def command_start_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        f"–°–∞–ª—é—Ç! –ö—É–¥–∞ –ø–æ–π–¥–µ–º? üó∫",
        reply_markup=get_main_menu()
    )

@router.message(Command("help"))
async def command_help_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await message.answer(
        "üìñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "‚ûï <b>–î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ</b> - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ\n"
        "üìã <b>–ú–æ–∏ –º–µ—Å—Ç–∞</b> - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç\n"
        "üîç <b>–ü–æ–∏—Å–∫</b> - –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n"
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> - —Å–∫–æ–ª—å–∫–æ –º–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n\n"
        "–ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Å—Ç–∞ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å:\n"
        "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"
        "‚Ä¢ –ê–¥—Ä–µ—Å\n"
        "‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ\n"
        "‚Ä¢ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—é (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ)",
        parse_mode=ParseMode.HTML
    )

# ===== –î–û–ë–ê–í–õ–ï–ù–ò–ï –ú–ï–°–¢–ê =====

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ")
async def add_place_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–∞"""
    user_place_data[message.from_user.id] = {}
    await state.set_state(AddPlaceStates.waiting_for_name)
    await message.answer(
        "üìç –ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —ç—Ç–æ –º–µ—Å—Ç–æ?",
        reply_markup=get_cancel_keyboard()
    )

@router.message(AddPlaceStates.waiting_for_name)
async def process_place_name(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—Ç–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_menu())
        return
    
    # –ù–∞–∑–≤–∞–Ω–∏–µ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã
    user_place_data[message.from_user.id]['name'] = message.text.capitalize()
    await state.set_state(AddPlaceStates.waiting_for_type)
    await message.answer(
        "üè∑ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ—Å—Ç–∞:",
        reply_markup=get_place_type_keyboard()
    )

@router.message(AddPlaceStates.waiting_for_type)
async def process_place_type(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –º–µ—Å—Ç–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_menu())
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –º–µ—Å—Ç–∞
    user_place_data[message.from_user.id]['place_type'] = message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ —Ü–µ–Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è (–¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤, –∫–∞—Ñ–µ, –±–∞—Ä–æ–≤)
    if message.text in ["üç∫ –ë–∞—Ä", "‚òïÔ∏è –ö–∞—Ñ–µ", "üçΩ –†–µ—Å—Ç–æ—Ä–∞–Ω"]:
        await state.set_state(AddPlaceStates.waiting_for_price)
        await message.answer(
            "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=get_price_category_keyboard()
        )
    else:
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∞–¥—Ä–µ—Å—É
        await state.set_state(AddPlaceStates.waiting_for_address)
        await message.answer(
            "üìÆ –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –º–µ—Å—Ç–∞\n\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', –µ—Å–ª–∏ –∞–¥—Ä–µ—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")],
                    [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
                ],
                resize_keyboard=True
            )
        )

@router.message(AddPlaceStates.waiting_for_price)
async def process_price_category(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_menu())
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    user_place_data[message.from_user.id]['price_category'] = message.text
    
    await state.set_state(AddPlaceStates.waiting_for_address)
    await message.answer(
        "üìÆ –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –º–µ—Å—Ç–∞\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', –µ—Å–ª–∏ –∞–¥—Ä–µ—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")],
                [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
            ],
            resize_keyboard=True
        )
    )

@router.message(AddPlaceStates.waiting_for_address)
async def process_place_address(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –º–µ—Å—Ç–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_menu())
        return
    
    if message.text != "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        user_place_data[message.from_user.id]['address'] = message.text
    
    await state.set_state(AddPlaceStates.waiting_for_description)
    await message.answer(
        "üìù –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –∑–∞–º–µ—Ç–∫—É\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–õ—É—á—à–∏–π –∫–æ—Ñ–µ –≤ –≥–æ—Ä–æ–¥–µ, Wi-Fi –µ—Å—Ç—å</i>",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")],
                [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
            ],
            resize_keyboard=True
        ),
        parse_mode=ParseMode.HTML
    )

@router.message(AddPlaceStates.waiting_for_description)
async def process_place_description(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –º–µ—Å—Ç–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_menu())
        return
    
    if message.text != "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        user_place_data[message.from_user.id]['description'] = message.text
    
    await state.set_state(AddPlaceStates.waiting_for_location)
    await message.answer(
        "üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –º–µ—Å—Ç–∞\n\n"
        "–ù–∞–∂–º–∏—Ç–µ üìé ‚Üí –ì–µ–æ–ø–æ–∑–∏—Ü–∏—è –≤ Telegram\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å' –±–µ–∑ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –±–µ–∑ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏")],
                [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
            ],
            resize_keyboard=True
        )
    )

@router.message(AddPlaceStates.waiting_for_location, F.location)
async def process_location(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    user_place_data[message.from_user.id]['latitude'] = message.location.latitude
    user_place_data[message.from_user.id]['longitude'] = message.location.longitude
    await save_place(message, state)

@router.message(AddPlaceStates.waiting_for_location, F.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –±–µ–∑ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏")
async def process_skip_location(message: Message, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    await save_place(message, state)

@router.message(AddPlaceStates.waiting_for_location, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def process_cancel_location(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
    await state.clear()
    user_place_data.pop(message.from_user.id, None)
    await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_menu())

async def save_place(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Å—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    data = user_place_data.get(message.from_user.id, {})
    
    place_id = await db.add_place(
        user_id=message.from_user.id,
        name=data.get('name'),
        place_type=data.get('place_type'),
        price_category=data.get('price_category'),
        address=data.get('address'),
        description=data.get('description'),
        latitude=data.get('latitude'),
        longitude=data.get('longitude')
    )
    
    response = f"‚úÖ –ú–µ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n"
    response += f"üìç <b>{data.get('name')}</b>\n"
    if data.get('place_type'):
        response += f"üè∑ {data.get('place_type')}"
        if data.get('price_category'):
            response += f" {data.get('price_category')}"
        response += "\n"
    if data.get('address'):
        response += f"üìÆ {data.get('address')}\n"
    if data.get('description'):
        response += f"üìù {data.get('description')}\n"
    if data.get('latitude') and data.get('longitude'):
        response += f"üó∫ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"
    
    await message.answer(response, parse_mode=ParseMode.HTML, reply_markup=get_main_menu())
    
    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    user_place_data.pop(message.from_user.id, None)
    await state.clear()

# ===== –ü–†–û–°–ú–û–¢–† –ú–ï–°–¢ =====

@router.message(F.text == "üìã –ú–æ–∏ –º–µ—Å—Ç–∞")
async def show_places(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ—Å—Ç"""
    places = await db.get_user_places(message.from_user.id)
    
    if not places:
        await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç.\n"
            "–ù–∞–∂–º–∏—Ç–µ '‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ' –¥–ª—è –Ω–∞—á–∞–ª–∞!",
            reply_markup=get_main_menu()
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üç∫ –ë–∞—Ä—ã", callback_data="filter_üç∫ –ë–∞—Ä"),
            InlineKeyboardButton(text="‚òïÔ∏è –ö–∞—Ñ–µ", callback_data="filter_‚òïÔ∏è –ö–∞—Ñ–µ")
        ],
        [
            InlineKeyboardButton(text="üçΩ –†–µ—Å—Ç–æ—Ä–∞–Ω—ã", callback_data="filter_üçΩ –†–µ—Å—Ç–æ—Ä–∞–Ω"),
            InlineKeyboardButton(text="üèõ –ú—É–∑–µ–∏", callback_data="filter_üèõ –ú—É–∑–µ–π")
        ],
        [
            InlineKeyboardButton(text="üå≥ –ü–∞—Ä–∫–∏", callback_data="filter_üå≥ –ü–∞—Ä–∫"),
            InlineKeyboardButton(text="üìç –õ–æ–∫–∞—Ü–∏–∏", callback_data="filter_üìç –õ–æ–∫–∞—Ü–∏—è")
        ],
        [
            InlineKeyboardButton(text="üìã –í—Å–µ –º–µ—Å—Ç–∞", callback_data="filter_all")
        ]
    ])
    
    await message.answer(
        f"üìã <b>–£ –≤–∞—Å {len(places)} –º–µ—Å—Ç</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard
    )

@router.callback_query(F.data.startswith("filter_"))
async def filter_places(callback: CallbackQuery):
    """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–µ—Å—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    filter_type = callback.data.replace("filter_", "")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –Ω–∞ —É—Ä–æ–≤–Ω–µ –ë–î (–±—ã—Å—Ç—Ä–µ–µ)
    if filter_type == "all":
        places = await db.get_user_places(callback.from_user.id)
    else:
        places = await db.get_user_places(callback.from_user.id, place_type=filter_type)
    
    if not places:
        await callback.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –º–µ—Å—Ç", show_alert=True)
        return
    
    await callback.answer()
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ—Å—Ç–∞
    category_name = filter_type if filter_type == "all" else filter_type
    header = f"üìã <b>–í—Å–µ –º–µ—Å—Ç–∞ ({len(places)})</b>" if filter_type == "all" else f"<b>{category_name} ({len(places)})</b>"
    
    await callback.message.answer(header, parse_mode=ParseMode.HTML)
    
    for place in places:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üó∫ –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ", callback_data=f"show_map_{place['id']}")],
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{place['id']}")]
        ])
        
        text = f"üìç <b>{place['name']}</b>\n"
        if place.get('place_type'):
            text += f"üè∑ {place['place_type']}"
            if place.get('price_category'):
                text += f" {place['price_category']}"
            text += "\n"
        if place['address']:
            text += f"üìÆ {place['address']}\n"
        if place['description']:
            text += f"üìù {place['description']}\n"
        text += f"\nüïê –î–æ–±–∞–≤–ª–µ–Ω–æ: {format_date(place['created_at'])}"
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏—é
        if place['latitude'] and place['longitude']:
            await callback.message.answer_location(
                latitude=place['latitude'],
                longitude=place['longitude']
            )
        
        await callback.message.answer(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard
        )

@router.callback_query(F.data.startswith("show_map_"))
async def show_place_on_map(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Å—Ç–æ –Ω–∞ –∫–∞—Ä—Ç–µ"""
    place_id = int(callback.data.split("_")[2])
    place = await db.get_place(place_id, callback.from_user.id)
    
    if not place:
        await callback.answer("–ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    if place['latitude'] and place['longitude']:
        await callback.message.answer_location(
            latitude=place['latitude'],
            longitude=place['longitude']
        )
        await callback.answer("üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
    else:
        await callback.answer("–£ —ç—Ç–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏", show_alert=True)

@router.callback_query(F.data.startswith("delete_"))
async def delete_place_confirm(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Å—Ç–∞"""
    place_id = int(callback.data.split("_")[1])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{place_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")
        ]
    ])
    
    await callback.message.edit_text(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –º–µ—Å—Ç–æ?",
        reply_markup=keyboard
    )

@router.callback_query(F.data.startswith("confirm_delete_"))
async def delete_place(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Å—Ç–∞"""
    place_id = int(callback.data.split("_")[2])
    await db.delete_place(place_id, callback.from_user.id)
    
    await callback.message.edit_text("üóë –ú–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–æ")
    await callback.answer("–£–¥–∞–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")

@router.callback_query(F.data == "cancel_delete")
async def cancel_delete(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è"""
    await callback.message.delete()
    await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")

# ===== –ü–û–ò–°–ö =====

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
class SearchStates(StatesGroup):
    waiting_for_query = State()

@router.message(F.text == "üîç –ü–æ–∏—Å–∫")
async def search_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞"""
    await state.set_state(SearchStates.waiting_for_query)
    await message.answer(
        "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=get_cancel_keyboard()
    )

@router.message(SearchStates.waiting_for_query)
async def search_places(message: Message, state: FSMContext):
    """–ü–æ–∏—Å–∫ –º–µ—Å—Ç"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_menu())
        return
    
    query = message.text
    places = await db.search_places(message.from_user.id, query)
    
    await state.clear()
    
    if not places:
        await message.answer(
            f"üòî –ú–µ—Å—Ç–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '<i>{query}</i>' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            parse_mode=ParseMode.HTML,
            reply_markup=get_main_menu()
        )
        return
    
    await message.answer(
        f"üîç –ù–∞–π–¥–µ–Ω–æ –º–µ—Å—Ç: <b>{len(places)}</b>",
        parse_mode=ParseMode.HTML
    )
    
    for place in places:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üó∫ –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ", callback_data=f"show_map_{place['id']}")],
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{place['id']}")]
        ])
        
        text = f"üìç <b>{place['name']}</b>\n"
        if place.get('place_type'):
            text += f"üè∑ {place['place_type']}"
            if place.get('price_category'):
                text += f" {place['price_category']}"
            text += "\n"
        if place['address']:
            text += f"üìÆ {place['address']}\n"
        if place['description']:
            text += f"üìù {place['description']}"
        
        if place['latitude'] and place['longitude']:
            await message.answer_location(
                latitude=place['latitude'],
                longitude=place['longitude']
            )
        
        await message.answer(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard
        )

# ===== –°–¢–ê–¢–ò–°–¢–ò–ö–ê =====

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    count = await db.count_user_places(message.from_user.id)
    
    await message.answer(
        f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
        f"üìç –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –º–µ—Å—Ç: <b>{count}</b>\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name}",
        parse_mode=ParseMode.HTML
    )

# ===== –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø =====

@router.message(F.text == "üéâ –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")
async def add_event(message: Message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
    await message.answer(
        "üéâ <b>–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!</b>\n\n"
        "–°–∫–æ—Ä–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º.",
        parse_mode=ParseMode.HTML,
        reply_markup=get_main_menu()
    )

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await db.init_db()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    bot = Bot(TOKEN)
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
    dp.include_router(router)
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    
    # –ó–∞–ø—É—Å–∫ polling
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

