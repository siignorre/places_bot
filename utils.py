"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –±–æ—Ç–∞
"""
from datetime import datetime
from typing import Dict, Any, Optional, List
import time
import aiohttp
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class SimpleCache:
    """–ü—Ä–æ—Å—Ç–æ–π –∫—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å TTL"""
    def __init__(self, ttl_seconds: int = 300):
        self.cache: Dict[str, tuple[Any, float]] = {}
        self.ttl = ttl_seconds
    
    def get(self, key: str) -> Optional[Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞"""
        if key in self.cache:
            value, timestamp = self.cache[key]
            if time.time() - timestamp < self.ttl:
                return value
            else:
                del self.cache[key]
        return None
    
    def set(self, key: str, value: Any):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫—ç—à"""
        self.cache[key] = (value, time.time())
    
    def clear(self, pattern: str = None):
        """–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à (–∏–ª–∏ –∑–∞–ø–∏—Å–∏ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É)"""
        if pattern:
            keys_to_delete = [k for k in self.cache.keys() if pattern in k]
            for key in keys_to_delete:
                del self.cache[key]
        else:
            self.cache.clear()

def format_date(date_str: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –≤ DD.MM.YYYY"""
    try:
        dt = datetime.fromisoformat(date_str.replace('Z', '+00:00'))
        return dt.strftime('%d.%m.%Y')
    except:
        return date_str

def format_movie_text(movie: dict, include_genre: bool = True) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Ñ–∏–ª—å–º–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    rating_stars = "‚≠ê" * movie['rating'] if movie.get('rating') else ""
    text = f"üé¨ <b>{movie['title']}</b> ({movie['year']})\n"
    
    if include_genre:
        text += f"üé≠ {movie['genre']}\n"
    
    text += f"üìä {movie['status']}"
    
    if rating_stars:
        text += f"\n{rating_stars}"
    
    if movie.get('notes'):
        text += f"\nüìù {movie['notes']}"
    
    return text

def format_series_text(series: dict, include_genre: bool = True) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Å–µ—Ä–∏–∞–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    rating_stars = "‚≠ê" * series['rating'] if series.get('rating') else ""
    text = f"üì∫ <b>{series['title']}</b> ({series['year']})\n"
    
    if include_genre:
        text += f"üé≠ {series['genre']}\n"
    
    text += f"üìä –°–µ–∑–æ–Ω–æ–≤: {series.get('seasons', 0)}, –°–µ—Ä–∏–π: {series.get('episodes', 0)}\n"
    text += f"üì∫ {series['status']}"
    
    if rating_stars:
        text += f"\n{rating_stars}"
    
    if series.get('notes'):
        text += f"\nüìù {series['notes']}"
    
    return text

def capitalize_first(text: str) -> str:
    """–ü–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è"""
    return text[0].upper() + text[1:] if text else text

def calculate_tips_distribution(total_amount: float) -> dict:
    """
    –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∞–µ–≤—ã—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    
    –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—É–º–º—ã:
    - 1000 ‚ÇΩ –Ø–Ω–¥–µ–∫—Å.–ü—ç–π
    - 1000 ‚ÇΩ –°–±–µ—Ä–±–∞–Ω–∫
    - 1000 ‚ÇΩ –û–±—É—á–µ–Ω–∏–µ
    - 300 ‚ÇΩ –ê–∫—Ü–∏–∏
    - 300 ‚ÇΩ –ë–∏–∑–Ω–µ—Å
    –ò—Ç–æ–≥–æ: 3600 ‚ÇΩ
    
    –°–≤—ã—à–µ 3600 —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è:
    - 50% –ñ–∏–∑–Ω—å
    - 30% –û–¥–µ–∂–¥–∞
    - 20% –ù–∞–∫–æ–ø–ª–µ–Ω–∏—è/–¢–µ—Ö–Ω–∏–∫–∞
    """
    distribution = {
        '–°–±–µ—Ä–±–∞–Ω–∫': 0,
        '–Ø–Ω–¥–µ–∫—Å –ü—ç–π': 0,
        '–ë–∏–∑–Ω–µ—Å': 0,
        '–û–±—É—á–µ–Ω–∏–µ': 0,
        '–ê–∫—Ü–∏–∏': 0,
        '–ñ–∏–∑–Ω—å': 0,
        '–û–¥–µ–∂–¥–∞': 0,
        '–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è/–¢–µ—Ö–Ω–∏–∫–∞': 0
    }
    
    if total_amount <= 0:
        return distribution
    
    if total_amount < 3600:
        # –ï—Å–ª–∏ –º–µ–Ω—å—à–µ 3600, –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—É–º–º—ã
        ratio = total_amount / 3600
        distribution['–Ø–Ω–¥–µ–∫—Å –ü—ç–π'] = 1000 * ratio
        distribution['–°–±–µ—Ä–±–∞–Ω–∫'] = 1000 * ratio
        distribution['–û–±—É—á–µ–Ω–∏–µ'] = 1000 * ratio
        distribution['–ê–∫—Ü–∏–∏'] = 300 * ratio
        distribution['–ë–∏–∑–Ω–µ—Å'] = 300 * ratio
    else:
        # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—É–º–º—ã
        distribution['–Ø–Ω–¥–µ–∫—Å –ü—ç–π'] = 1000
        distribution['–°–±–µ—Ä–±–∞–Ω–∫'] = 1000
        distribution['–û–±—É—á–µ–Ω–∏–µ'] = 1000
        distribution['–ê–∫—Ü–∏–∏'] = 300
        distribution['–ë–∏–∑–Ω–µ—Å'] = 300
        
        # –û—Å—Ç–∞—Ç–æ–∫ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º
        remainder = total_amount - 3600
        if remainder > 0:
            distribution['–ñ–∏–∑–Ω—å'] = remainder * 0.50
            distribution['–û–¥–µ–∂–¥–∞'] = remainder * 0.30
            distribution['–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è/–¢–µ—Ö–Ω–∏–∫–∞'] = remainder * 0.20
    
    return distribution

def calculate_avito_distribution(amount: float) -> dict:
    """
    –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ –ê–≤–∏—Ç–æ
    
    30% –°–±–µ—Ä–±–∞–Ω–∫, 10% –Ø–Ω–¥–µ–∫—Å –ü—ç–π, 20% –û–±—É—á–µ–Ω–∏–µ, 40% –•–æ—Ç–µ–ª–∫–∏
    """
    return {
        '–°–±–µ—Ä–±–∞–Ω–∫': amount * 0.30,
        '–Ø–Ω–¥–µ–∫—Å –ü—ç–π': amount * 0.10,
        '–û–±—É—á–µ–Ω–∏–µ': amount * 0.20,
        '–•–æ—Ç–µ–ª–∫–∏': amount * 0.40
    }

def get_motivation_message(amount: float) -> str:
    """
    –ü–æ–ª—É—á–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—É–º–º—ã —á–∞–µ–≤—ã—Ö
    """
    if amount < 2000:
        return ""  # –ë–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–∞–ª—ã—Ö —Å—É–º–º
    elif amount < 4000:
        return "üí™ –ù–µ–ø–ª–æ—Ö–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
    elif amount < 6000:
        return "üî• –û—Ç–ª–∏—á–Ω–∞—è —Å–º–µ–Ω–∞! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!"
    elif amount < 8000:
        return "üåü –í–∞—É! –¢—ã –∫—Ä—É—Ç–æ–π!"
    elif amount < 12000:
        return "üöÄ –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! –¢—ã –º–∞—à–∏–Ω–∞!"
    else:
        return "üëë‚≠ê –õ–µ–≥–µ–Ω–¥–∞! –¢—ã –ø—Ä–æ—Å—Ç–æ –∫–æ—Å–º–æ—Å!"

def format_distribution(distribution: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    text = "üí∞ <b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:</b>\n\n"
    
    emoji_map = {
        '–°–±–µ—Ä–±–∞–Ω–∫': 'üí≥',
        '–Ø–Ω–¥–µ–∫—Å –ü—ç–π': 'üí∞',
        '–ë–∏–∑–Ω–µ—Å': 'üíº',
        '–ñ–∏–∑–Ω—å': 'üè†',
        '–û–±—É—á–µ–Ω–∏–µ': 'üìö',
        '–ê–∫—Ü–∏–∏': 'üìà',
        '–û–¥–µ–∂–¥–∞': 'üëî',
        '–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è/–¢–µ—Ö–Ω–∏–∫–∞': 'üíª'
    }
    
    for category, amount in distribution.items():
        if amount > 0:
            emoji = emoji_map.get(category, 'üíµ')
            text += f"{emoji} <b>{category}:</b> {amount:,.0f} ‚ÇΩ\n"
    
    return text


def calculate_wage_distribution(wage_amount: float) -> dict:
    """
    –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ (–Ω–µ —á–∞–µ–≤—ã—Ö!)
    
    30% –°–±–µ—Ä–±–∞–Ω–∫, 20% –û–±—É—á–µ–Ω–∏–µ, 40% –ñ–∏–∑–Ω—å, 10% –•–æ—Ç–µ–ª–∫–∏
    """
    return {
        '–°–±–µ—Ä–±–∞–Ω–∫': wage_amount * 0.30,
        '–û–±—É—á–µ–Ω–∏–µ': wage_amount * 0.20,
        '–ñ–∏–∑–Ω—å': wage_amount * 0.40,
        '–•–æ—Ç–µ–ª–∫–∏': wage_amount * 0.10
    }


def format_wage_distribution(distribution: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    text = "üíº <b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏:</b>\n\n"
    
    emoji_map = {
        '–°–±–µ—Ä–±–∞–Ω–∫': 'üí≥',
        '–û–±—É—á–µ–Ω–∏–µ': 'üìö',
        '–ñ–∏–∑–Ω—å': 'üè†',
        '–•–æ—Ç–µ–ª–∫–∏': 'üéÅ'
    }
    
    for category, amount in distribution.items():
        if amount > 0:
            emoji = emoji_map.get(category, 'üíµ')
            text += f"{emoji} <b>{category}:</b> {amount:,.0f} ‚ÇΩ\n"
    
    return text


# ============= YANDEX MAPS API =============

async def search_place_yandex(query: str, limit: int = 7) -> List[Dict[str, Any]]:
    """
    –ü–æ–∏—Å–∫ –º–µ—Å—Ç–∞ –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –∞–¥—Ä–µ—Å—É –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
    
    Args:
        query: –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞, –∞–¥—Ä–µ—Å –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        
    Returns:
        –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    """
    api_key = os.getenv('YANDEX_API_KEY', '56546efa-170e-47c4-8793-af1f3b2f1fc1')
    
    if not api_key:
        return []
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Geocoder API –¥–ª—è –ø–æ–∏—Å–∫–∞
    url = "https://geocode-maps.yandex.ru/1.x/"
    
    params = {
        'apikey': api_key,
        'geocode': query,
        'format': 'json',
        'results': limit,
        'kind': 'house'  # –ò—Å–∫–∞—Ç—å –∑–¥–∞–Ω–∏—è/–º–µ—Å—Ç–∞
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, params=params, timeout=10) as response:
                if response.status != 200:
                    return []
                
                data = await response.json()
                
                places = []
                members = data.get('response', {}).get('GeoObjectCollection', {}).get('featureMember', [])
                
                for member in members:
                    geo_object = member.get('GeoObject', {})
                    
                    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                    pos = geo_object.get('Point', {}).get('pos', '').split()
                    if len(pos) == 2:
                        longitude, latitude = float(pos[0]), float(pos[1])
                    else:
                        continue
                    
                    # –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –∞–¥—Ä–µ—Å
                    name = geo_object.get('name', '')
                    description = geo_object.get('description', '')
                    full_address = geo_object.get('metaDataProperty', {}).get('GeocoderMetaData', {}).get('text', '')
                    
                    # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –º–µ—Å—Ç–∞
                    kind = geo_object.get('metaDataProperty', {}).get('GeocoderMetaData', {}).get('kind', '')
                    
                    places.append({
                        'name': name,
                        'description': description,
                        'address': full_address,
                        'latitude': latitude,
                        'longitude': longitude,
                        'kind': kind,
                        'display_text': f"{name}\n{description}" if description else name
                    })
                
                return places
                
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–µ—Å—Ç–∞ –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö: {e}")
        return []


async def get_place_details_yandex(latitude: float, longitude: float) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
    
    Args:
        latitude: –®–∏—Ä–æ—Ç–∞
        longitude: –î–æ–ª–≥–æ—Ç–∞
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–µ—Å—Ç–µ
    """
    api_key = os.getenv('YANDEX_API_KEY', '56546efa-170e-47c4-8793-af1f3b2f1fc1')
    
    if not api_key:
        return {}
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Organizations API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π
    url = "https://search-maps.yandex.ru/v1/"
    
    params = {
        'apikey': api_key,
        'text': f"{latitude},{longitude}",
        'lang': 'ru_RU',
        'type': 'biz',
        'results': 1
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, params=params, timeout=10) as response:
                if response.status != 200:
                    return {}
                
                data = await response.json()
                
                features = data.get('features', [])
                if not features:
                    return {}
                
                properties = features[0].get('properties', {})
                company_meta = properties.get('CompanyMetaData', {})
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                result = {
                    'name': properties.get('name', ''),
                    'address': properties.get('description', ''),
                    'categories': company_meta.get('Categories', []),
                    'phones': company_meta.get('Phones', []),
                    'hours': company_meta.get('Hours', {}),
                    'url': company_meta.get('url', '')
                }
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã
                hours_data = result.get('hours', {})
                if hours_data:
                    availabilities = hours_data.get('Availabilities', [])
                    if availabilities:
                        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                        first_availability = availabilities[0]
                        intervals = first_availability.get('Intervals', [])
                        if intervals:
                            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏
                            interval = intervals[0]
                            from_time = interval.get('from', '')
                            to_time = interval.get('to', '')
                            if from_time and to_time:
                                result['working_hours'] = f"{from_time} - {to_time}"
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫—É—Ö–Ω–∏ –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
                categories = result.get('categories', [])
                cuisine = None
                for cat in categories:
                    cat_name = cat.get('name', '').lower()
                    if '—è–ø–æ–Ω—Å–∫' in cat_name or '—Å—É—à–∏' in cat_name:
                        cuisine = '–Ø–ø–æ–Ω—Å–∫–∞—è'
                    elif '–∫–∏—Ç–∞–π—Å–∫' in cat_name:
                        cuisine = '–ö–∏—Ç–∞–π—Å–∫–∞—è'
                    elif '–∏—Ç–∞–ª—å—è–Ω—Å–∫' in cat_name or '–ø–∏—Ü—Ü' in cat_name:
                        cuisine = '–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è'
                    elif '—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫' in cat_name:
                        cuisine = '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è'
                    elif '–∏—Å–ø–∞–Ω—Å–∫' in cat_name:
                        cuisine = '–ò—Å–ø–∞–Ω—Å–∫–∞—è'
                    elif '–≥—Ä–µ—á–µ—Å–∫' in cat_name:
                        cuisine = '–ì—Ä–µ—á–µ—Å–∫–∞—è'
                    elif '–∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫' in cat_name or '–±—É—Ä–≥–µ—Ä' in cat_name:
                        cuisine = '–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è'
                    
                    if cuisine:
                        break
                
                result['cuisine'] = cuisine
                
                return result
                
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –º–µ—Å—Ç–∞: {e}")
        return {}

