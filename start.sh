#!/bin/bash

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –ü—É—Ç–∏
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LOCKFILE="$SCRIPT_DIR/.bot.lock"
BOT_SCRIPT="$SCRIPT_DIR/bot.py"
VENV_DIR="$SCRIPT_DIR/venv"
REQUIREMENTS="$SCRIPT_DIR/requirements.txt"
ENV_FILE="$SCRIPT_DIR/.env"

# –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Å —Ü–≤–µ—Ç–æ–º
print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_header() {
    echo -e "${PURPLE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo -e "${CYAN}ü§ñ  Telegram Bot Manager${NC}"
    echo -e "${PURPLE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
check_status() {
    if [ -f "$LOCKFILE" ]; then
        PID=$(cat "$LOCKFILE")
        if ps -p "$PID" > /dev/null 2>&1; then
            return 0  # –†–∞–±–æ—Ç–∞–µ—Ç
        else
            return 1  # Lockfile –µ—Å—Ç—å, –Ω–æ –ø—Ä–æ—Ü–µ—Å—Å –º—ë—Ä—Ç–≤
        fi
    fi
    return 2  # –ù–µ –∑–∞–ø—É—â–µ–Ω
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
show_status() {
    print_header
    check_status
    STATUS=$?
    
    if [ $STATUS -eq 0 ]; then
        PID=$(cat "$LOCKFILE")
        print_success "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (PID: $PID)"
        echo ""
        print_info "–õ–æ–≥–∏: tail -f $SCRIPT_DIR/bot.log"
        print_info "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: ./start.sh stop"
    elif [ $STATUS -eq 1 ]; then
        print_warning "–ù–∞–π–¥–µ–Ω —Å—Ç–∞—Ä—ã–π lockfile, –Ω–æ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        print_info "–û—á–∏—Å—Ç–∫–∞: rm -f $LOCKFILE"
    else
        print_error "–ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        print_info "–ó–∞–ø—É—Å—Ç–∏—Ç—å: ./start.sh start"
    fi
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
stop_bot() {
    print_header
    check_status
    STATUS=$?
    
    if [ $STATUS -eq 0 ]; then
        PID=$(cat "$LOCKFILE")
        print_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ (PID: $PID)..."
        
        kill "$PID" 2>/dev/null
        sleep 2
        
        if ps -p "$PID" > /dev/null 2>&1; then
            print_warning "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞..."
            kill -9 "$PID" 2>/dev/null
        fi
        
        rm -f "$LOCKFILE"
        print_success "–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    elif [ $STATUS -eq 1 ]; then
        print_warning "–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ lockfile..."
        rm -f "$LOCKFILE"
        print_success "–ì–æ—Ç–æ–≤–æ"
    else
        print_warning "–ë–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
}

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
start_bot() {
    print_header
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω
    check_status
    if [ $? -eq 0 ]; then
        PID=$(cat "$LOCKFILE")
        print_error "–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω (PID: $PID)"
        print_info "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: ./start.sh stop"
        exit 1
    fi
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ lockfile –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if [ -f "$LOCKFILE" ]; then
        print_warning "–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ lockfile..."
        rm -f "$LOCKFILE"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
    if ! command -v python3 &> /dev/null; then
        print_error "Python 3 –Ω–µ –Ω–∞–π–¥–µ–Ω"
        print_info "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: brew install python3 (macOS)"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ bot.py
    if [ ! -f "$BOT_SCRIPT" ]; then
        print_error "–§–∞–π–ª bot.py –Ω–µ –Ω–∞–π–¥–µ–Ω"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ .env
    if [ ! -f "$ENV_FILE" ]; then
        print_warning "–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω"
        print_info "–°–æ–∑–¥–∞–π—Ç–µ .env —Å BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω"
    fi
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if [ ! -d "$VENV_DIR" ]; then
        print_info "–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
        python3 -m venv "$VENV_DIR"
        print_success "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ"
    fi
    
    # –ê–∫—Ç–∏–≤–∞—Ü–∏—è venv
    source "$VENV_DIR/bin/activate"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if [ ! -f "$REQUIREMENTS" ]; then
        print_error "–§–∞–π–ª requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–µ—à requirements.txt –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    REQUIREMENTS_HASH_FILE="$VENV_DIR/.requirements_hash"
    CURRENT_HASH=$(md5 -q "$REQUIREMENTS" 2>/dev/null || md5sum "$REQUIREMENTS" 2>/dev/null | cut -d' ' -f1)
    
    NEED_INSTALL=false
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if [ ! -f "$REQUIREMENTS_HASH_FILE" ]; then
        NEED_INSTALL=true
        print_info "–ü–µ—Ä–≤–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    elif [ "$(cat "$REQUIREMENTS_HASH_FILE")" != "$CURRENT_HASH" ]; then
        NEED_INSTALL=true
        print_warning "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ requirements.txt"
        print_info "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    elif ! python3 -c "import aiogram" &> /dev/null; then
        NEED_INSTALL=true
        print_warning "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã"
        print_info "–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    fi
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if [ "$NEED_INSTALL" = true ]; then
        pip install -q -r "$REQUIREMENTS"
        if [ $? -eq 0 ]; then
            echo "$CURRENT_HASH" > "$REQUIREMENTS_HASH_FILE"
            print_success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
        else
            print_error "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
            exit 1
        fi
    else
        print_success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã"
    fi
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    echo ""
    print_success "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞..."
    print_info "–õ–æ–≥–∏: tail -f $SCRIPT_DIR/bot.log"
    print_info "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: Ctrl+C –∏–ª–∏ ./start.sh stop"
    echo ""
    
    python3 "$BOT_SCRIPT"
}

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
restart_bot() {
    print_header
    print_info "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞..."
    echo ""
    
    stop_bot
    sleep 1
    start_bot
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
update_dependencies() {
    print_header
    
    if [ ! -d "$VENV_DIR" ]; then
        print_error "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        print_info "–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: ./start.sh start"
        exit 1
    fi
    
    if [ ! -f "$REQUIREMENTS" ]; then
        print_error "–§–∞–π–ª requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω"
        exit 1
    fi
    
    print_info "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    source "$VENV_DIR/bin/activate"
    
    pip install -q --upgrade -r "$REQUIREMENTS"
    
    if [ $? -eq 0 ]; then
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ö–µ—à
        REQUIREMENTS_HASH_FILE="$VENV_DIR/.requirements_hash"
        CURRENT_HASH=$(md5 -q "$REQUIREMENTS" 2>/dev/null || md5sum "$REQUIREMENTS" 2>/dev/null | cut -d' ' -f1)
        echo "$CURRENT_HASH" > "$REQUIREMENTS_HASH_FILE"
        
        print_success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã"
        echo ""
        print_info "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: ./start.sh restart"
    else
        print_error "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
        exit 1
    fi
}

# –ü–æ–º–æ—â—å
show_help() {
    print_header
    echo ""
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./start.sh [–∫–æ–º–∞–Ω–¥–∞]"
    echo ""
    echo "–ö–æ–º–∞–Ω–¥—ã:"
    echo "  start    - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"
    echo "  stop     - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"
    echo "  restart  - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"
    echo "  status   - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"
    echo "  update   - –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (requirements.txt)"
    echo "  help     - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo ""
    echo "–ë–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ (–∞–Ω–∞–ª–æ–≥ 'start')"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  ./start.sh              # –ó–∞–ø—É—Å—Ç–∏—Ç—å"
    echo "  ./start.sh status       # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å"
    echo "  ./start.sh update       # –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
    echo ""
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
cd "$SCRIPT_DIR"

case "${1:-start}" in
    start)
        start_bot
        ;;
    stop)
        stop_bot
        ;;
    restart)
        restart_bot
        ;;
    status)
        show_status
        ;;
    update)
        update_dependencies
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1"
        echo ""
        show_help
        exit 1
        ;;
esac
